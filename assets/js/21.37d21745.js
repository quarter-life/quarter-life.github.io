(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{579:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"『python-工匠』是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#『python-工匠』是什么"}},[t._v("#")]),t._v(" 『Python 工匠』是什么？")]),t._v(" "),a("p",[t._v("我一直觉得编程某种意义上是一门『手艺』，因为优雅而高效的代码，就如同完美的手工艺品一样让人赏心悦目。")]),t._v(" "),a("p",[t._v("在雕琢代码的过程中，有大工程：比如应该用什么架构、哪种设计模式。也有更多的小细节，比如何时使用异常（Exceptions）、或怎么给变量起名。那些真正优秀的代码，正是由无数优秀的细节造就的。")]),t._v(" "),a("p",[t._v("『Python 工匠』这个系列文章，是我的一次小小尝试。它专注于分享 Python 编程中的一些偏 "),a("strong",[t._v("『小』")]),t._v(" 的东西。希望能够帮到每一位编程路上的匠人。")]),t._v(" "),a("blockquote",[a("p",[t._v("这是 “Python 工匠”系列的第 1 篇文章。"),a("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[t._v("[查看系列所有文章]"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"变量和代码质量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和代码质量"}},[t._v("#")]),t._v(" 变量和代码质量")]),t._v(" "),a("p",[t._v("作为『Python 工匠』系列文章的第一篇，我想先谈谈 『变量（Variables）』。因为如何定义和使用变量，一直都是学习任何一门编程语言最先要掌握的技能之一。")]),t._v(" "),a("p",[t._v("变量用的好或不好，和代码质量有着非常重要的联系。在关于变量的诸多问题中，为变量起一个好名字尤其重要。")]),t._v(" "),a("h3",{attrs:{id:"内容目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容目录"}},[t._v("#")]),t._v(" 内容目录")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%A6%82%E4%BD%95%E4%B8%BA%E5%8F%98%E9%87%8F%E8%B5%B7%E5%90%8D"}},[t._v("如何为变量起名")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E5%8F%98%E9%87%8F%E5%90%8D%E8%A6%81%E6%9C%89%E6%8F%8F%E8%BF%B0%E6%80%A7%E4%B8%8D%E8%83%BD%E5%A4%AA%E5%AE%BD%E6%B3%9B"}},[t._v("1. 变量名要有描述性，不能太宽泛")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%8F%98%E9%87%8F%E5%90%8D%E6%9C%80%E5%A5%BD%E8%AE%A9%E4%BA%BA%E8%83%BD%E7%8C%9C%E5%87%BA%E7%B1%BB%E5%9E%8B"}},[t._v("2. 变量名最好让人能猜出类型")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%90%8D%E5%AD%97%E4%BC%9A%E8%A2%AB%E5%BD%93%E6%88%90-bool-%E7%B1%BB%E5%9E%8B"}},[t._v("『什么样的名字会被当成 bool 类型？』")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%90%8D%E5%AD%97%E4%BC%9A%E8%A2%AB%E5%BD%93%E6%88%90-intfloat-%E7%B1%BB%E5%9E%8B"}},[t._v("『什么样的名字会被当成 int/float 类型？』")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B"}},[t._v("其他类型")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E9%80%82%E5%BD%93%E4%BD%BF%E7%94%A8%E5%8C%88%E7%89%99%E5%88%A9%E5%91%BD%E5%90%8D%E6%B3%95"}},[t._v("3. 适当使用『匈牙利命名法』")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%8F%98%E9%87%8F%E5%90%8D%E5%B0%BD%E9%87%8F%E7%9F%AD%E4%BD%86%E6%98%AF%E7%BB%9D%E5%AF%B9%E4%B8%8D%E8%A6%81%E5%A4%AA%E7%9F%AD"}},[t._v("4. 变量名尽量短，但是绝对不要太短")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E4%BD%BF%E7%94%A8%E7%9F%AD%E5%90%8D%E5%AD%97%E7%9A%84%E4%BE%8B%E5%A4%96%E6%83%85%E5%86%B5"}},[t._v("使用短名字的例外情况")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E5%85%B6%E4%BB%96%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9"}},[t._v("5. 其他注意事项")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%98%E9%87%8F"}},[t._v("更好的使用变量")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E6%80%A7"}},[t._v("1. 保持一致性")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%B0%BD%E9%87%8F%E4%B8%8D%E8%A6%81%E7%94%A8-globalslocals"}},[t._v("2. 尽量不要用 globals()/locals()")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#3-%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89%E5%B0%BD%E9%87%8F%E9%9D%A0%E8%BF%91%E4%BD%BF%E7%94%A8"}},[t._v("3. 变量定义尽量靠近使用")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#4-%E5%90%88%E7%90%86%E4%BD%BF%E7%94%A8-namedtupledict-%E6%9D%A5%E8%AE%A9%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%A4%9A%E4%B8%AA%E5%80%BC"}},[t._v("4. 合理使用 namedtuple/dict 来让函数返回多个值")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#5-%E6%8E%A7%E5%88%B6%E5%8D%95%E4%B8%AA%E5%87%BD%E6%95%B0%E5%86%85%E7%9A%84%E5%8F%98%E9%87%8F%E6%95%B0%E9%87%8F"}},[t._v("5. 控制单个函数内的变量数量")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#6-%E5%8F%8A%E6%97%B6%E5%88%A0%E6%8E%89%E9%82%A3%E4%BA%9B%E6%B2%A1%E7%94%A8%E7%9A%84%E5%8F%98%E9%87%8F"}},[t._v("6. 及时删掉那些没用的变量")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#7-%E8%83%BD%E4%B8%8D%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E5%B0%B1%E4%B8%8D%E5%AE%9A%E4%B9%89"}},[t._v("7. 能不定义变量就不定义")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E7%BB%93%E8%AF%AD"}},[t._v("结语")])])]),t._v(" "),a("h2",{attrs:{id:"如何为变量起名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何为变量起名"}},[t._v("#")]),t._v(" 如何为变量起名")]),t._v(" "),a("p",[t._v("在计算机科学领域，有一句著名的格言（俏皮话）：")]),t._v(" "),a("blockquote",[a("p",[t._v("There are only two hard things in Computer Science: cache invalidation and naming things.\n在计算机科学领域只有两件难事：缓存失效 和 给东西起名字")]),t._v(" "),a("p",[t._v("-- Phil Karlton")])]),t._v(" "),a("p",[t._v("第一个『缓存过期问题』的难度不用多说，任何用过缓存的人都会懂。至于第二个『给东西起名字』这事的难度，我也是深有体会。在我的职业生涯里，度过的最为黑暗的下午之一，就是坐在显示器前抓耳挠腮为一个新项目起一个合适的名字。")]),t._v(" "),a("p",[t._v("编程时起的最多的名字，还数各种变量。给变量起一个好名字很重要，"),a("strong",[t._v("因为好的变量命名可以极大提高代码的整体可读性。")])]),t._v(" "),a("p",[t._v("下面几点，是我总结的为变量起名时，最好遵守的基本原则。")]),t._v(" "),a("h3",{attrs:{id:"_1-变量名要有描述性-不能太宽泛"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-变量名要有描述性-不能太宽泛"}},[t._v("#")]),t._v(" 1. 变量名要有描述性，不能太宽泛")]),t._v(" "),a("p",[t._v("在"),a("strong",[t._v("可接受的长度范围内")]),t._v("，变量名能把它所指向的内容描述的越精确越好。所以，尽量不要用那些过于宽泛的词来作为你的变量名：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("BAD")]),t._v(": "),a("code",[t._v("day")]),t._v(", "),a("code",[t._v("host")]),t._v(", "),a("code",[t._v("cards")]),t._v(", "),a("code",[t._v("temp")])]),t._v(" "),a("li",[a("strong",[t._v("GOOD")]),t._v(":  "),a("code",[t._v("day_of_week")]),t._v(", "),a("code",[t._v("hosts_to_reboot")]),t._v(", "),a("code",[t._v("expired_cards")])])]),t._v(" "),a("h3",{attrs:{id:"_2-变量名最好让人能猜出类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-变量名最好让人能猜出类型"}},[t._v("#")]),t._v(" 2. 变量名最好让人能猜出类型")]),t._v(" "),a("p",[t._v("所有学习 Python 的人都知道，Python 是一门动态类型语言，它（至少在 "),a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0484/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 484"),a("OutboundLink")],1),t._v(" 出现前）没有变量类型声明。所以当你看到一个变量时，除了通过上下文猜测，没法轻易知道它是什么类型。")]),t._v(" "),a("p",[t._v("不过，人们对于变量名和变量类型的关系，通常会有一些直觉上的约定，我把它们总结在了下面。")]),t._v(" "),a("h4",{attrs:{id:"『什么样的名字会被当成-bool-类型-』"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#『什么样的名字会被当成-bool-类型-』"}},[t._v("#")]),t._v(" 『什么样的名字会被当成 bool 类型？』")]),t._v(" "),a("p",[t._v("布尔类型变量的最大特点是：它只存在两个可能的值 "),a("strong",[t._v("『是』")]),t._v(" 或 "),a("strong",[t._v("『不是』")]),t._v("。所以，用 "),a("code",[t._v("is")]),t._v("、"),a("code",[t._v("has")]),t._v(" 等非黑即白的词修饰的变量名，会是个不错的选择。原则就是："),a("strong",[t._v("让读到变量名的人觉得这个变量只会有『是』或『不是』两种值")]),t._v("。")]),t._v(" "),a("p",[t._v("下面是几个不错的示例：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("is_superuser")]),t._v("：『是否超级用户』，只会有两种值：是/不是")]),t._v(" "),a("li",[a("code",[t._v("has_error")]),t._v("：『有没有错误』，只会有两种值：有/没有")]),t._v(" "),a("li",[a("code",[t._v("allow_vip")]),t._v("：『是否允许 VIP』，只会有两种值：允许/不允许")]),t._v(" "),a("li",[a("code",[t._v("use_msgpack")]),t._v("：『是否使用 msgpack』，只会有两种值：使用/不使用")]),t._v(" "),a("li",[a("code",[t._v("debug")]),t._v("：『是否开启调试模式』，被当做 bool 主要是因为约定俗成")])]),t._v(" "),a("h4",{attrs:{id:"『什么样的名字会被当成-int-float-类型-』"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#『什么样的名字会被当成-int-float-类型-』"}},[t._v("#")]),t._v(" 『什么样的名字会被当成 int/float 类型？』")]),t._v(" "),a("p",[t._v("人们看到和数字相关的名字，都会默认他们是 int/float 类型，下面这些是比较常见的：")]),t._v(" "),a("ul",[a("li",[t._v("释义为数字的所有单词，比如："),a("code",[t._v("port（端口号）")]),t._v("、"),a("code",[t._v("age（年龄）")]),t._v("、"),a("code",[t._v("radius（半径）")]),t._v(" 等等")]),t._v(" "),a("li",[t._v("使用 _id 结尾的单词，比如："),a("code",[t._v("user_id")]),t._v("、"),a("code",[t._v("host_id")])]),t._v(" "),a("li",[t._v("使用 length/count 开头或者结尾的单词，比如： "),a("code",[t._v("length_of_username")]),t._v("、"),a("code",[t._v("max_length")]),t._v("、"),a("code",[t._v("users_count")])])]),t._v(" "),a("p",[a("strong",[t._v("注意：")]),t._v(" 不要使用普通的复数来表示一个 int 类型变量，比如 "),a("code",[t._v("apples")]),t._v("、"),a("code",[t._v("trips")]),t._v("，最好用 "),a("code",[t._v("number_of_apples")]),t._v("、"),a("code",[t._v("trips_count")]),t._v(" 来替代。")]),t._v(" "),a("h4",{attrs:{id:"其他类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他类型"}},[t._v("#")]),t._v(" 其他类型")]),t._v(" "),a("p",[t._v("对于 str、list、tuple、dict 这些复杂类型，很难有一个统一的规则让我们可以通过名字去猜测变量类型。比如 "),a("code",[t._v("headers")]),t._v("，既可能是一个头信息列表，也可能是包含头信息的 dict。")]),t._v(" "),a("p",[t._v("对于这些类型的变量名，最推荐的方式，就是编写规范的文档，在函数和方法的 document string 中，使用 sphinx 格式（"),a("a",{attrs:{href:"http://www.sphinx-doc.org/en/stable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 官方文档使用的文档工具"),a("OutboundLink")],1),t._v("）来标注所有变量的类型。")]),t._v(" "),a("h3",{attrs:{id:"_3-适当使用『匈牙利命名法』"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-适当使用『匈牙利命名法』"}},[t._v("#")]),t._v(" 3. 适当使用『匈牙利命名法』")]),t._v(" "),a("p",[t._v("第一次知道『"),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Hungarian_notation",target:"_blank",rel:"noopener noreferrer"}},[t._v("匈牙利命名法"),a("OutboundLink")],1),t._v("』，是在 "),a("a",{attrs:{href:"http://www.joelonsoftware.com/articles/Wrong.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Joel on Software 的一篇博文"),a("OutboundLink")],1),t._v("中。简而言之，匈牙利命名法就是把变量的『类型』缩写，放到变量名的最前面。")]),t._v(" "),a("p",[t._v("关键在于，这里说的变量『类型』，并非指传统意义上的 int/str/list 这种类型，而是指那些和你的代码业务逻辑相关的类型。")]),t._v(" "),a("p",[t._v("比如，在你的代码中有两个变量："),a("code",[t._v("students")]),t._v(" 和 "),a("code",[t._v("teachers")]),t._v("，他们指向的内容都是一个包含 Person 对象的 list 。使用『匈牙利命名法』后，可以把这两个名字改写成这样：")]),t._v(" "),a("p",[t._v("students -> "),a("code",[t._v("pl_students")]),t._v("\nteachers -> "),a("code",[t._v("pl_teachers")])]),t._v(" "),a("p",[t._v("其中 pl 是 "),a("strong",[t._v("person list")]),t._v(" 的首字母缩写。当变量名被加上前缀后，如果你看到以 "),a("code",[t._v("pl_")]),t._v(" 打头的变量，就能知道它所指向的值类型了。")]),t._v(" "),a("p",[t._v("很多情况下，使用『匈牙利命名法』是个不错的主意，因为它可以改善你的代码可读性，尤其在那些变量众多、同一类型多次出现时。注意不要滥用就好。")]),t._v(" "),a("h3",{attrs:{id:"_4-变量名尽量短-但是绝对不要太短"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-变量名尽量短-但是绝对不要太短"}},[t._v("#")]),t._v(" 4. 变量名尽量短，但是绝对不要太短")]),t._v(" "),a("p",[t._v("在前面，我们提到要让变量名有描述性。如果不给这条原则加上任何限制，那么你很有可能写出这种描述性极强的变量名："),a("code",[t._v("how_much_points_need_for_level2")]),t._v("。如果代码中充斥着这种过长的变量名，对于代码可读性来说是个灾难。")]),t._v(" "),a("p",[t._v("一个好的变量名，长度应该控制在 "),a("strong",[t._v("两到三个单词左右")]),t._v("。比如上面的名字，可以缩写为 "),a("code",[t._v("points_level2")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("绝大多数情况下，都应该避免使用那些只有一两个字母的短名字")]),t._v("，比如数组索引三剑客 "),a("code",[t._v("i")]),t._v("、"),a("code",[t._v("j")]),t._v("、"),a("code",[t._v("k")]),t._v("，用有明确含义的名字，比如 person_index 来代替它们总是会更好一些。")]),t._v(" "),a("h4",{attrs:{id:"使用短名字的例外情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用短名字的例外情况"}},[t._v("#")]),t._v(" 使用短名字的例外情况")]),t._v(" "),a("p",[t._v("有时，上面的原则也存在一些例外。当一些意义明确但是较长的变量名重复出现时，为了让代码更简洁，使用短名字缩写是完全可以的。但是为了降低理解成本，同一段代码内最好不要使用太多这种短名字。")]),t._v(" "),a("p",[t._v("比如在 Python 中导入模块时，就会经常用到短名字作为别名，像 Django i18n 翻译时常用的 "),a("code",[t._v("gettext")]),t._v(" 方法通常会被缩写成 "),a("code",[t._v("_")]),t._v(" 来使用*（from django.utils.translation import ugettext as _）*")]),t._v(" "),a("h3",{attrs:{id:"_5-其他注意事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-其他注意事项"}},[t._v("#")]),t._v(" 5. 其他注意事项")]),t._v(" "),a("p",[t._v("其他一些给变量命名的注意事项：")]),t._v(" "),a("ul",[a("li",[t._v("同一段代码内不要使用过于相似的变量名，比如同时出现 "),a("code",[t._v("users")]),t._v("、"),a("code",[t._v("users1")]),t._v("、 "),a("code",[t._v("user3")]),t._v(" 这种序列")]),t._v(" "),a("li",[t._v("不要使用带否定含义的变量名，用 "),a("code",[t._v("is_special")]),t._v(" 代替 "),a("code",[t._v("is_not_normal")])])]),t._v(" "),a("h2",{attrs:{id:"更好的使用变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更好的使用变量"}},[t._v("#")]),t._v(" 更好的使用变量")]),t._v(" "),a("p",[t._v("前面讲了如何为变量取一个好名字，下面我们谈谈在日常使用变量时，应该注意的一些小细节。")]),t._v(" "),a("h3",{attrs:{id:"_1-保持一致性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-保持一致性"}},[t._v("#")]),t._v(" 1. 保持一致性")]),t._v(" "),a("p",[t._v("如果你在一个方法内里面把图片变量叫做 "),a("code",[t._v("photo")]),t._v("，在其他的地方就不要把它改成 "),a("code",[t._v("image")]),t._v("，这样只会让代码的阅读者困惑：『"),a("code",[t._v("image")]),t._v(" 和 "),a("code",[t._v("photo")]),t._v(" 到底是不是同一个东西？』")]),t._v(" "),a("p",[t._v("另外，虽然 Python 是动态类型语言，但那也不意味着你可以用同一个变量名一会表示 str 类型，过会又换成 list。"),a("strong",[t._v("同一个变量名指代的变量类型，也需要保持一致性。")])]),t._v(" "),a("h3",{attrs:{id:"_2-尽量不要用-globals-locals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-尽量不要用-globals-locals"}},[t._v("#")]),t._v(" 2. 尽量不要用 globals()/locals()")]),t._v(" "),a("p",[t._v("也许你第一次发现 globals()/locals() 这对内建函数时很兴奋，迫不及待的写下下面这种极端『简洁』的代码：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render_trip_page")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" trip_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("objects"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    trip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_object_or_404"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("trip_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    is_suggested "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" is_suggested"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用 locals() 节约了三行代码，我是个天才！")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trip.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("locals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("千万不要这么做，这样只会让读到这段代码的人（包括三个月后的你自己）痛恨你，因为他需要记住这个函数内定义的所有变量（想想这个函数增长到两百行会怎么样？），更别提 locals() 还会把一些不必要的变量传递出去。")]),t._v(" "),a("p",[t._v("更何况， "),a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0020/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Zen of Python（Python 之禅）"),a("OutboundLink")],1),t._v(" 说的清清楚楚："),a("strong",[t._v("Explicit is better than implicit.（显式优于隐式）")]),t._v("。所以，还是老老实实把代码写成这样吧：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" render"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trip.html'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trip'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'is_suggested'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" is_suggested\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"_3-变量定义尽量靠近使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量定义尽量靠近使用"}},[t._v("#")]),t._v(" 3. 变量定义尽量靠近使用")]),t._v(" "),a("p",[t._v("这个原则属于老生常谈了。很多人（包括我）在刚开始学习编程时，会有一个习惯。就是把所有的变量定义写在一起，放在函数或方法的最前面。")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("generate_trip_png")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    markers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    photo_markers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    text_markers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    marker_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    point_count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("这样做只会让你的代码『看上去很整洁』，但是对提高代码可读性没有任何帮助。")]),t._v(" "),a("p",[t._v("更好的做法是，"),a("strong",[t._v("让变量定义尽量靠近使用")]),t._v("。那样当你阅读代码时，可以更好的理解代码的逻辑，而不是费劲的去想这个变量到底是什么、哪里定义的？")]),t._v(" "),a("h3",{attrs:{id:"_4-合理使用-namedtuple-dict-来让函数返回多个值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-合理使用-namedtuple-dict-来让函数返回多个值"}},[t._v("#")]),t._v(" 4. 合理使用 namedtuple/dict 来让函数返回多个值")]),t._v(" "),a("p",[t._v("Python 的函数可以返回多个值：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latlon_to_address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" country"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 利用多返回值一次解包定义多个变量")]),t._v("\ncountry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" latlon_to_address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("但是，这样的用法会产生一个小问题：如果某一天， "),a("code",[t._v("latlon_to_address")]),t._v(" 函数需要返回『城区（District）』时怎么办？")]),t._v(" "),a("p",[t._v("如果是上面这种写法，你需要找到所有调用 "),a("code",[t._v("latlon_to_address")]),t._v(" 的地方，补上多出来的这个变量，否则 "),a("em",[t._v("ValueError: too many values to unpack")]),t._v(" 就会找上你：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("country"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" district "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" latlon_to_address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者使用 _ 忽略多出来的返回值")]),t._v("\ncountry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" city"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" latlon_to_address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("对于这种可能变动的多返回值函数，使用 namedtuple/dict 会更方便一些。当你新增返回值时，不会对之前的函数调用产生任何破坏性的影响：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. 使用 dict")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latlon_to_address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'country'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" country"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'province'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'city'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" city\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\naddr_dict "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" latlon_to_address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. 使用 namedtuple")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" collections "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" namedtuple\n\nAddress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" namedtuple"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Address"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'country'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'province'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'city'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("latlon_to_address")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        country"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("country"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        province"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("province"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        city"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("city\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\naddr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" latlon_to_address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lon"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br")])]),a("p",[t._v("不过这样做也有坏处，因为代码对变更的兼容性虽然变好了，但是你不能继续用之前 "),a("code",[t._v("x, y = f()")]),t._v(" 的方式一次解包定义多个变量了。取舍在于你自己。")]),t._v(" "),a("h3",{attrs:{id:"_5-控制单个函数内的变量数量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-控制单个函数内的变量数量"}},[t._v("#")]),t._v(" 5. 控制单个函数内的变量数量")]),t._v(" "),a("p",[t._v("人脑的能力是有限的，研究表明，人类的短期记忆只能同时记住不超过十个名字。所以，当你的某个函数过长（一般来说，超过一屏的的函数就会被认为有点过长了），包含了太多变量时。请及时把它拆分为多个小函数吧。")]),t._v(" "),a("h3",{attrs:{id:"_6-及时删掉那些没用的变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-及时删掉那些没用的变量"}},[t._v("#")]),t._v(" 6. 及时删掉那些没用的变量")]),t._v(" "),a("p",[t._v("这条原则非常简单，也很容易做到。但是如果没有遵守，那它对你的代码质量的打击是毁灭级的。会让阅读你代码的人有一种被愚弄的感觉。")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fancy_func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读者心理：嗯，这里定义了一个 fancy_vars")]),t._v("\n    fancy_vars "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_fancy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("（一大堆代码过后）\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 读者心理：这里就结束了？之前的 fancy_vars 去哪了？被猫吃了吗？")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("所以，请打开 IDE 的智能提示，及时清理掉那些定义了但是没有使用的变量吧。")]),t._v(" "),a("h3",{attrs:{id:"_7-定义临时变量提升可读性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-定义临时变量提升可读性"}},[t._v("#")]),t._v(" 7. 定义临时变量提升可读性")]),t._v(" "),a("p",[t._v("有时，我们的代码里会出现一些复杂的表达式，像下面这样：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 为所有性别为女性，或者级别大于 3 的活跃用户发放 10000 个金币")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("is_active "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("and")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'female'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("or")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("level "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add_coins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("看见 "),a("code",[t._v("if")]),t._v(" 后面那一长串了吗？有点难读对不对？但是如果我们把它赋值成一个临时变量，\n就能给读者一个心理缓冲，提高可读性：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 为所有性别为女性，或者级别大于 3 的活跃用户发放 10000 个金币\nuser_is_eligible = user.is_active and (user.sex == 'female' or user.level > 3):\n\nif user_is_eligible:\n    user.add_coins(10000)\n    return\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("定义临时变量可以提高可读性。但有时，把不必要的东西赋值成临时变量反而会让代码显得啰嗦：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_trip_by_user_id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 心理活动：『嗯，这个值未来说不定会修改/二次使用』，让我们先把它定义成变量吧！")]),t._v("\n    user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    trip "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" get_best_trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trip'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" trip\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("其实，你所想的『未来』永远不会来，这段代码里的三个临时变量完全可以去掉，变成这样：")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get_best_trip_by_user_id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'user'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" get_user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'trip'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" get_best_trip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("没必要为了那些可能出现的变动，牺牲代码当前的可读性。如果以后有定义变量的需求，那就以后再加吧。")]),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[t._v("#")]),t._v(" 结语")]),t._v(" "),a("p",[t._v("碎碎念了一大堆，不知道有多少人能够坚持到最后。变量作为程序语言的重要组成部分，值得我们在定义和使用它时，多花一丁点时间思考一下，那样会让你的代码变得更优秀。")]),t._v(" "),a("p",[t._v("这是『Python 工匠』系列文章的第一篇，不知道看完文章的你，有没有什么想吐槽的？请留言告诉我吧。")]),t._v(" "),a("p",[a("RouterLink",{attrs:{to:"/docs/python-craftsman/2-if-else-block-secrets.html"}},[t._v(">>>下一篇【2.编写条件分支代码的技巧】")])],1),t._v(" "),a("blockquote",[a("p",[t._v("文章更新记录：")]),t._v(" "),a("ul",[a("li",[t._v("2018.04.09：根据 @onlyice 的建议，添加了 namedtuple 部分")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);