(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{543:function(s,t,a){"use strict";a.r(t);var n=a(7),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("blockquote",[a("p",[s._v("这是 “Python 工匠”系列的第 13 篇文章。"),a("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[s._v("[查看系列所有文章]"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("在 "),a("a",{attrs:{href:"https://www.zlovezl.cn/articles/write-solid-python-codes-part-1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("上一篇文章"),a("OutboundLink")],1),s._v(" 里，我用一个虚拟小项目作为例子，讲解了“SOLID”设计原则中的前两位成员：S*（单一职责原则）"),a("em",[s._v("与 O")]),s._v("（开放-关闭原则）*。")]),s._v(" "),a("p",[s._v("在这篇文章中，我将继续介绍 SOLID 原则的第三位成员："),a("strong",[s._v("L（里氏替换原则）")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"里氏替换原则与继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则与继承"}},[s._v("#")]),s._v(" 里氏替换原则与继承")]),s._v(" "),a("p",[s._v("在开始前，我觉得有必要先提一下 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Inheritance",target:"_blank",rel:"noopener noreferrer"}},[s._v("继承（Inheritance）"),a("OutboundLink")],1),s._v("。因为和前面两条非常抽象的原则不同，“里氏替换原则”是一条非常具体的，和类继承有关的原则。")]),s._v(" "),a("p",[s._v("在 OOP 世界里，继承算是一个非常特殊的存在，它有点像一把无坚不摧的双刃剑，强大且危险。合理使用继承，可以大大减少类与类之间的重复代码，让程序事半功倍，而不当的继承关系，则会让类与类之间建立起错误的强耦合，带来大片难以理解和维护的代码。")]),s._v(" "),a("p",[s._v("正是因为这样，对继承的态度也可以大致分为两类。大多数人认为，继承和多态、封装等特性一样，属于面向对象编程的几大核心特征之一。而同时有另一部分人觉得，继承带来的 "),a("a",{attrs:{href:"https://www.javaworld.com/article/2073649/why-extends-is-evil.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("坏处远比好处多"),a("OutboundLink")],1),s._v("。甚至在 Go 这门相对年轻的编程语言里，设计者直接去掉了继承，提倡完全使用组合来替代。")]),s._v(" "),a("p",[s._v('从我个人的编程经验来看，继承确实极易被误用。要设计出合理的继承关系，是一件需要深思熟虑的困难事儿。不过幸运的是，在这方面，"里氏替换原则"'),a("em",[s._v("(后简称 L 原则)")]),s._v(" 为我们提供了非常好的指导意义。")]),s._v(" "),a("p",[s._v("让我们来看看它的内容。")]),s._v(" "),a("h2",{attrs:{id:"l-里氏替换原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#l-里氏替换原则"}},[s._v("#")]),s._v(" L：里氏替换原则")]),s._v(" "),a("p",[s._v("同前面的 S 与 O 两个原则的命名方式不同，里氏替换原则*（Liskov Substitution Principle）*是直接用它的发明者 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Barbara_Liskov",target:"_blank",rel:"noopener noreferrer"}},[s._v("Barbara Liskov"),a("OutboundLink")],1),s._v(" 命名的，原文看起来像一个复杂的数学公式：")]),s._v(" "),a("blockquote",[a("p",[s._v("Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T.")]),s._v(" "),a("ul",[a("li",[s._v("出处: "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Liskov_substitution_principle",target:"_blank",rel:"noopener noreferrer"}},[s._v("Liskov substitution principle - Wikipedia"),a("OutboundLink")],1)])])]),s._v(" "),a("p",[s._v("如果把它比较通俗的翻译过来，大概是这样："),a("strong",[s._v("当你使用继承时，子类（派生类）对象应该可以在程序中替代父类（基类）对象使用，而不破坏程序原本的功能。")])]),s._v(" "),a("p",[s._v("光说有点难理解，让我们用代码来看看一个在 Python 中违反 Liskov 原则的例子。")]),s._v(" "),a("h2",{attrs:{id:"一个违反-l-原则的样例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个违反-l-原则的样例"}},[s._v("#")]),s._v(" 一个违反 L 原则的样例")]),s._v(" "),a("p",[s._v("假设我们在为一个 Web 站点设计用户模型。这个站点的用户分为两类：普通用户和站点管理员。所以在代码里，我们定义了两个用户类：普通用户类 "),a("code",[s._v("User")]),s._v(" 和管理员类 "),a("code",[s._v("Admin")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""普通用户模型类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""停用当前用户\n        """')]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_active "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""管理员用户类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员用户不允许被停用")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" RuntimeError"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'admin can not be deactivated!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("因为普通用户的绝大多数操作在管理员上都适用，所以我们把 "),a("code",[s._v("Admin")]),s._v(" 类设计成了继承自 "),a("code",[s._v("User")]),s._v(" 类的子类。不过在“停用”操作方面，管理员和普通用户之间又有所区别： "),a("strong",[s._v("普通用户可以被停用，但管理员不行。")])]),s._v(" "),a("p",[s._v("于是在 "),a("code",[s._v("Admin")]),s._v(" 类里，我们重写了 "),a("code",[s._v("deactivate")]),s._v(" 方法，使其抛出一个 "),a("code",[s._v("RuntimeError")]),s._v(" 异常，让管理员对象无法被停用。")]),s._v(" "),a("p",[s._v("子类继承父类，然后重写父类的少量行为，这看上去正是类继承的典型用法。但不幸的是，这段代码违反了“里氏替换原则”。具体是怎么回事呢？让我们来看看。")]),s._v(" "),a("h3",{attrs:{id:"不当继承关系如何违反-l-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不当继承关系如何违反-l-原则"}},[s._v("#")]),s._v(" 不当继承关系如何违反 L 原则")]),s._v(" "),a("p",[s._v("现在，假设我们需要写一个新函数，它可以同时接受多个用户对象作为参数，批量将它们停用。代码如下：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate_users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""批量停用多个用户\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deactivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("很明显，上面的代码是有问题的。因为 "),a("code",[s._v("deactivate_users")]),s._v(" 函数在参数注解里写到，它接受一切 "),a("strong",[s._v("可被迭代的 User 对象")]),s._v("，那么管理员 "),a("code",[s._v("Admin")]),s._v(" 是不是 "),a("code",[s._v("User")]),s._v(" 对象？当然是，因为它是继承自 "),a("code",[s._v("User")]),s._v(" 类的子类。")]),s._v(" "),a("p",[s._v("但是，如果你真的把 "),a("code",[s._v('[User("foo"), Admin("bar_admin")]')]),s._v(" 这样的用户列表传到 "),a("code",[s._v("deactivate_users")]),s._v(" 函数里，程序立马就会抛出 "),a("code",[s._v("RuntimeError")]),s._v(" 异常，因为管理员对象 "),a("code",[s._v('Admin("bar_admin")')]),s._v(" 压根不支持停用操作。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("deactivate_users")]),s._v(" 函数看来，子类 "),a("code",[s._v("Admin")]),s._v(" 无法随意替换父类 "),a("code",[s._v("User")]),s._v(" 使用，所以现在的代码是不符合 L 原则的。")]),s._v(" "),a("h3",{attrs:{id:"一个简单但错误的解决办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个简单但错误的解决办法"}},[s._v("#")]),s._v(" 一个简单但错误的解决办法")]),s._v(" "),a("p",[s._v("要修复上面的函数，最直接的办法就是在函数内部增加一个额外的类型判断：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate_users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""批量停用多个用户\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员用户不支持 deactivate 方法，跳过")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("f'skip deactivating admin user ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),s._v("\n\n        user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deactivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("在修改版的 "),a("code",[s._v("deactivate_users")]),s._v(" 函数里，如果它在循环时恰好发现某个用户是 "),a("code",[s._v("Admin")]),s._v(" 类，就跳过这次操作。这样它就能正确处理那些混合了管理员的用户列表了。")]),s._v(" "),a("p",[s._v("但是，这样修改的缺点是显而易见的。因为虽然到目前为止，只有 "),a("code",[s._v("Admin")]),s._v(" 类型的用户不允许被停用。但是，**谁能保证未来不会出现其他不能被停用的用户类型呢？**比如：")]),s._v(" "),a("ul",[a("li",[s._v("公司员工不允许被停用")]),s._v(" "),a("li",[s._v("VIP 用户不允许被停用")]),s._v(" "),a("li",[s._v("等等(... ...)")])]),s._v(" "),a("p",[s._v("而当这些新需求在未来不断出现时，我们就需要重复的修改 "),a("code",[s._v("deactivate_users")]),s._v(" 函数，来不断适配这些无法被停用的新用户类型。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate_users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在类型判断语句不断追加新用户类型")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Admin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" VIPUser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Staff"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("现在，让我们再回忆一下前面的 SOLID 第二原则："),a("strong",[s._v("“开放-关闭原则”")]),s._v("。这条原则认为：好的代码应该对扩展开发，"),a("strong",[s._v("对修改关闭")]),s._v("。而上面的函数很明显不符合这条原则。")]),s._v(" "),a("p",[s._v("到这里你会发现，**SOLID 里的每条原则并非完全独立的个体，它们之间其实互有联系。**比如，在这个例子里，我们先是违反了“里氏替换原则”，然后我们使用了错误的修复方式："),a("em",[s._v("增加类型判断")]),s._v("。之后发现，这样的代码同样也无法符合“开放-关闭原则”。")]),s._v(" "),a("h3",{attrs:{id:"正确的修改办法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确的修改办法"}},[s._v("#")]),s._v(" 正确的修改办法")]),s._v(" "),a("p",[s._v("既然为函数增加类型判断无法让代码变得更好，那我们就应该从别的方面入手。")]),s._v(" "),a("p",[s._v("“里氏替换原则”提到，*"),a("em",[s._v("子类")]),s._v("（Admin）"),a("em",[s._v("应该可以随意替换它的父类")]),s._v("（User）"),a("em",[s._v("，而不破坏程序")]),s._v("（deactivate_users）*本身的功能。**我们试过直接修改类的使用者来遵守这条原则，但是失败了。所以这次，让我们试着从源头上解决问题：重新设计类之间的继承关系。")]),s._v(" "),a("p",[s._v("具体点来说，子类不能只是简单通过抛出异常的方式对某个类方法进行“退化”。如果 "),a("em",[s._v("“对象不能支持某种操作”")]),s._v(" 本身就是这个类型的 "),a("strong",[s._v("核心特征")]),s._v(" 之一，那我们在进行父类设计时，就应该把这个 "),a("strong",[s._v("核心特征")]),s._v(" 设计进去。")]),s._v(" "),a("p",[s._v("拿用户类型举例，"),a("em",[s._v("“用户可能无法被停用”")]),s._v(" 就是 "),a("code",[s._v("User")]),s._v(" 类的核心特征之一，所以在设计父类时，我们就应该把它作为类方法*（或属性）*写进去。")]),s._v(" "),a("p",[s._v("让我们看看调整后的代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""普通用户模型类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("allow_deactivate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""是否允许被停用\n        """')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""将当前用户停用\n        """')]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_active "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("save"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""管理员用户类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("allow_deactivate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员用户不允许被停用")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deactivate_users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""批量停用多个用户\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" user "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("allow_deactivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string-interpolation"}},[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("f'user ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v(" does not allow deactivating, skip.'")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("continue")]),s._v("\n\n        user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deactivate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[s._v("在新代码里，我们在父类中增加了 "),a("code",[s._v("allow_deactivate")]),s._v(" 方法，由它来决定当前的用户类型是否允许被停用。而在 "),a("code",[s._v("deactivate_users")]),s._v(" 函数中，也不再需要通过脆弱的类型判断，来判定某类用户是否可以被停用。我们只需要调用 "),a("code",[s._v("user.allow_deactivate()")]),s._v(" 方法，程序便能自动跳过那些不支持停用操作的用户对象。")]),s._v(" "),a("p",[s._v("在这样的设计中，"),a("code",[s._v("User")]),s._v(" 类的子类 "),a("code",[s._v("Admin")]),s._v(" 做到了可以完全替代父类使用，而不会破坏程序 "),a("code",[s._v("deactivate_users")]),s._v(" 的功能。")]),s._v(" "),a("p",[s._v("所以我们可以说，修改后的类继承结构是符合里氏替换原则的。")]),s._v(" "),a("h2",{attrs:{id:"另一种违反方式-子类修改方法返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#另一种违反方式-子类修改方法返回值"}},[s._v("#")]),s._v(" 另一种违反方式：子类修改方法返回值")]),s._v(" "),a("p",[s._v("除了上面的例子外，还有一种常见的违反里氏替换原则的情况。让我们看看下面这段代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""普通用户模型类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""查询所有与之相关的帖子 ID\n        """')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""管理员用户类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员与所有的帖子都有关，为了节约内存，使用生成器返回帖子 ID")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("在这段代码里，我给用户类增加了一个新方法："),a("code",[s._v("list_related_posts")]),s._v("，调用它可以拿到所有和当前用户有关的帖子 ID。对于普通用户，方法返回的是自己发布过的所有帖子，而管理员则是站点里的所有帖子。")]),s._v(" "),a("p",[s._v("现在，假设我需要写一个函数，来获取和用户有关的所有帖子标题：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_user_post_titles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""获取与用户有关的所有帖子标题\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" post_id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_related_posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("post_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("title\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("对于上面的 "),a("code",[s._v("list_user_post_titles")]),s._v(" 函数来说，无论传入的 "),a("code",[s._v("user")]),s._v(" 参数是 "),a("code",[s._v("User")]),s._v(" 还是 "),a("code",[s._v("Admin")]),s._v(" 类型，它都能正常工作。因为，虽然普通用户和管理员类型的 "),a("code",[s._v("list_related_posts")]),s._v(" 方法返回结果略有区别，但它们都是**“可迭代的帖子 ID”**，所以函数里的循环在碰到不同的用户类型时都能正常进行。")]),s._v(" "),a("p",[s._v("既然如此，那上面的代码符合“里氏替换原则”吗？答案是否定的。因为虽然在当前 "),a("code",[s._v("list_user_post_titles")]),s._v(" 函数的视角看来，子类 "),a("code",[s._v("Admin")]),s._v(" 可以任意替代父类 "),a("code",[s._v("User")]),s._v(" 使用，但这只是特殊用例下的一个巧合，并没有通用性。请看看下面这个场景。")]),s._v(" "),a("p",[s._v("有一位新成员最近加入了项目开发，她需要实现一个新函数来获取与用户有关的所有帖子数量。当她读到 "),a("code",[s._v("User")]),s._v(" 类代码时，发现 "),a("code",[s._v("list_related_posts")]),s._v(" 方法返回一个包含所有帖子 ID 的列表，于是她就此写下了统计帖子数量的代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_user_posts_count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""获取与用户相关的帖子个数\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_related_posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("在大多数情况下，当 "),a("code",[s._v("user")]),s._v(" 参数只是普通用户类时，上面的函数是可以正常执行的。")]),s._v(" "),a("p",[s._v("不过有一天，有其他人偶然使用了一个管理员用户调用了上面的函数，马上就碰到了异常："),a("code",[s._v("TypeError: object of type 'generator' has no len()")]),s._v("。这时因为 "),a("code",[s._v("Admin")]),s._v(" 虽然是 "),a("code",[s._v("User")]),s._v(" 类型的子类，但它的 "),a("code",[s._v("list_related_posts")]),s._v(" 方法返回却是一个可迭代的生成器，并不是列表对象。而生成器是不支持 "),a("code",[s._v("len()")]),s._v(" 操作的。")]),s._v(" "),a("p",[s._v("所以，对于新的 "),a("code",[s._v("get_user_posts_count")]),s._v(" 函数来说，现在的用户类继承结构仍然违反了 L 原则。")]),s._v(" "),a("h3",{attrs:{id:"分析类方法返回结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分析类方法返回结果"}},[s._v("#")]),s._v(" 分析类方法返回结果")]),s._v(" "),a("p",[s._v("在我们的代码里，"),a("code",[s._v("User")]),s._v(" 类和 "),a("code",[s._v("Admin")]),s._v(" 类的 "),a("code",[s._v("list_related_posts")]),s._v(" 返回的是两类不同的结果：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("User 类")]),s._v("：返回一个包含帖子 ID 的列表对象")]),s._v(" "),a("li",[a("code",[s._v("Admin 类")]),s._v("：返回一个产生帖子 ID 的生成器")])]),s._v(" "),a("p",[s._v("很明显，二者之间存在共通点：它们都是可被迭代的 int 对象（"),a("code",[s._v("Iterable[int]")]),s._v("）。这也是为什么对于第一个获取用户帖子标题的函数来说，两个用户类可以互相交换使用的原因。")]),s._v(" "),a("p",[s._v("不过，针对某个特定函数，子类可以替代父类使用，并不等同于代码就符合“里氏替换原则”。要符合 L 原则，"),a("strong",[s._v("我们一定得让子类方法和父类返回同一类型的结果，支持同样的操作。或者更进一步，返回支持更多种操作的子类型结果也是可以接受的。")])]),s._v(" "),a("p",[s._v("而现在的设计没做到这点，现在的子类返回值所支持的操作，只是父类的一个子集。"),a("code",[s._v("Admin")]),s._v(" 子类的 "),a("code",[s._v("list_related_posts")]),s._v(" 方法所返回的生成器，只支持父类 "),a("code",[s._v("User")]),s._v(" 返回列表里的“迭代操作”，而不支持其他行为（比如 "),a("code",[s._v("len()")]),s._v("）。所以我们没办法随意的用子类替换父类，自然也就无法符合里氏替换原则。")]),s._v(" "),a("blockquote",[a("p",[s._v("**注意：**此处说“生成器”支持的操作是“列表”的子集其实不是特别严谨，因为生成器还支持 "),a("code",[s._v(".send()")]),s._v(" 等其他操作。不过在这里，我们可以只关注它的可迭代特性。")])]),s._v(" "),a("h3",{attrs:{id:"如何修改代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何修改代码"}},[s._v("#")]),s._v(" 如何修改代码")]),s._v(" "),a("p",[s._v("为了让代码符合“里氏替换原则”。我们需要让子类和父类的同名方法，返回同一类结果。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""普通用户模型类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" username\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""查询所有与之相关的帖子 ID\n        """')]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_related_posts_count")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""获取与用户有关的帖子总数\n        """')]),s._v("\n        value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" _ "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("list_related_posts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""管理员用户类\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Iterable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理员与所有的帖子都有关，为了节约内存，使用生成器返回")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" post "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" post"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("id")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("p",[s._v("而对于“获取与用户有关的帖子总数”这个需求，我们可以直接在父类 "),a("code",[s._v("User")]),s._v(" 中定义一个 "),a("code",[s._v("get_related_posts_count")]),s._v(" 方法，遍历帖子 ID，统计数量后返回。")]),s._v(" "),a("h3",{attrs:{id:"方法参数与-l-原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法参数与-l-原则"}},[s._v("#")]),s._v(" 方法参数与 L 原则")]),s._v(" "),a("p",[s._v("除了子类方法返回不一致的类型以外，子类对父类方法参数的变更也容易导致违反 L 原则。拿下面这段代码为例：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" include_hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ... ...")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ... ...")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("如果父类 "),a("code",[s._v("User")]),s._v(" 的 "),a("code",[s._v("list_related_posts")]),s._v(" 方法接收一个可选的 "),a("code",[s._v("include_hidden")]),s._v(" 参数，那它的子类就不应该去掉这个参数。否则当某个函数调用依赖了 "),a("code",[s._v("include_hidden")]),s._v(" 参数，但用户对象却是子类 "),a("code",[s._v("Admin")]),s._v(" 类型时，程序就会报错。")]),s._v(" "),a("p",[s._v("为了让代码符合 L 原则，我们必须做到 "),a("strong",[s._v("让子类的方法参数签名和父类完全一致，或者更宽松")]),s._v("。这样才能做到在任何使用参数调用父类方法的地方，随意用子类替换。")]),s._v(" "),a("p",[s._v("比如下面这样就是符合 L 原则的：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("User")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" include_hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ... ...")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Admin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("User"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list_related_posts")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" include_hidden"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" active_only "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子类可以为方法增加额外的可选参数：active_only")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ... ...")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("在这篇文章里，我通过两个具体场景，向你描述了 “SOLID” 设计原则中的第三位成员："),a("strong",[s._v("里氏替换原则")]),s._v("。")]),s._v(" "),a("p",[s._v("“里氏替换原则”是一个非常具体的原则，它专门为 OOP 里的继承场景服务。当你设计类继承关系，尤其是编写子类代码时，请经常性的问自己这个问题："),a("em",[s._v("“如果我把项目里所有使用父类的地方换成这个子类，程序是否还能正常运行？”")])]),s._v(" "),a("p",[s._v("如果答案是否定的，那么你就应该考虑调整一下现在的类设计了。调整方式有很多种，有时候你得把大类拆分为更小的类，有时候你得调换类之间的继承关系，有时候你得为父类添加新的方法和属性，就像文章里的第一个场景一样。只要开动脑筋，总会找到合适的办法。")]),s._v(" "),a("p",[s._v("让我们最后再总结一下吧：")]),s._v(" "),a("ul",[a("li",[s._v("**“L：里氏替换原则”**认为子类应该可以任意替换父类被使用")]),s._v(" "),a("li",[s._v("在类的使用方增加具体的类型判断（"),a("em",[s._v("isinstance")]),s._v("），通常不是最佳解决方案")]),s._v(" "),a("li",[s._v("违反里氏替换原则，通常也会导致违反“开放-关闭”原则")]),s._v(" "),a("li",[s._v("考虑什么是类的核心特征，然后为父类增加新的方法和属性可以帮到你")]),s._v(" "),a("li",[s._v("子类方法应该和父类同名方法返回同一类型，或者返回支持更多操作的子类型也行")]),s._v(" "),a("li",[s._v("子类的方法参数应该和父类同名方法完全一致，或者更为宽松")])]),s._v(" "),a("p",[s._v("看完文章的你，有没有什么想吐槽的？请留言或者在 "),a("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[s._v("项目 Github Issues"),a("OutboundLink")],1),s._v(" 告诉我吧。")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/docs/python-craftsman/14-write-solid-python-codes-part-3.html"}},[s._v(">>>下一篇【14.写好面向对象代码的原则（下）】")])],1),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/docs/python-craftsman/12-write-solid-python-codes-part-1.html"}},[s._v("<<<上一篇【12.写好面向对象代码的原则（上）】")])],1),s._v(" "),a("h2",{attrs:{id:"附录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[s._v("#")]),s._v(" 附录")]),s._v(" "),a("ul",[a("li",[s._v("题图来源: Photo by NeONBRAND on Unsplash")]),s._v(" "),a("li",[s._v("更多系列文章地址：https://github.com/piglei/one-python-craftsman")])]),s._v(" "),a("p",[s._v("系列其他文章：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[s._v("所有文章索引 [Github]"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.zlovezl.cn/articles/write-solid-python-codes-part-1/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Python 工匠：写好面向对象代码的原则（上）"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.zlovezl.cn/articles/two-tips-on-loop-writing/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Python 工匠：编写地道循环的两个建议"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.zlovezl.cn/articles/three-tips-on-writing-file-related-codes/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Python 工匠：高效操作文件的三个建议"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);