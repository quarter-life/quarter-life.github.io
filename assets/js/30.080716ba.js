(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{549:function(t,s,n){"use strict";n.r(s);var a=n(7),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"序言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#序言"}},[t._v("#")]),t._v(" 序言")]),t._v(" "),n("blockquote",[n("p",[t._v("这是 “Python 工匠”系列的第 4 篇文章。"),n("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[t._v("[查看系列所有文章]"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("容器”这两个字很少被 Python 技术文章提起。一看到“容器”，大家想到的多是那头蓝色小鲸鱼："),n("em",[t._v("Docker")]),t._v("，但这篇文章和它没有任何关系。本文里的容器，是 Python 中的一个抽象概念，是对"),n("strong",[t._v("专门用来装其他对象的数据类型")]),t._v("的统称。")]),t._v(" "),n("p",[t._v("在 Python 中，有四类最常见的内建容器类型："),n("code",[t._v("列表（list）")]),t._v("、"),n("code",[t._v("元组（tuple）")]),t._v("、"),n("code",[t._v("字典（dict）")]),t._v("、"),n("code",[t._v("集合（set）")]),t._v("。通过单独或是组合使用它们，可以高效的完成很多事情。")]),t._v(" "),n("p",[t._v("Python 语言自身的内部实现细节也与这些容器类型息息相关。比如 Python 的类实例属性、全局变量 "),n("code",[t._v("globals()")]),t._v(" 等就都是通过字典类型来存储的。")]),t._v(" "),n("p",[t._v("在这篇文章里，我首先会从容器类型的定义出发，尝试总结出一些日常编码的最佳实践。之后再围绕各个容器类型提供的特殊机能，分享一些编程的小技巧。")]),t._v(" "),n("h3",{attrs:{id:"内容目录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内容目录"}},[t._v("#")]),t._v(" 内容目录")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%BA%95%E5%B1%82%E7%9C%8B%E5%AE%B9%E5%99%A8"}},[t._v("底层看容器")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%86%99%E6%9B%B4%E5%BF%AB%E7%9A%84%E4%BB%A3%E7%A0%81"}},[t._v("写更快的代码")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1-%E9%81%BF%E5%85%8D%E9%A2%91%E7%B9%81%E6%89%A9%E5%85%85%E5%88%97%E8%A1%A8%E5%88%9B%E5%BB%BA%E6%96%B0%E5%88%97%E8%A1%A8"}},[t._v("1. 避免频繁扩充列表/创建新列表")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#2-%E5%9C%A8%E5%88%97%E8%A1%A8%E5%A4%B4%E9%83%A8%E6%93%8D%E4%BD%9C%E5%A4%9A%E7%9A%84%E5%9C%BA%E6%99%AF%E4%BD%BF%E7%94%A8-deque-%E6%A8%A1%E5%9D%97"}},[t._v("2. 在列表头部操作多的场景使用 deque 模块")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#3-%E4%BD%BF%E7%94%A8%E9%9B%86%E5%90%88%E5%AD%97%E5%85%B8%E6%9D%A5%E5%88%A4%E6%96%AD%E6%88%90%E5%91%98%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8"}},[t._v("3. 使用集合/字典来判断成员是否存在")])])])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E9%AB%98%E5%B1%82%E7%9C%8B%E5%AE%B9%E5%99%A8"}},[t._v("高层看容器")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E5%86%99%E6%89%A9%E5%B1%95%E6%80%A7%E6%9B%B4%E5%A5%BD%E7%9A%84%E4%BB%A3%E7%A0%81"}},[t._v("写扩展性更好的代码")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#%E9%9D%A2%E5%90%91%E5%AE%B9%E5%99%A8%E6%8E%A5%E5%8F%A3%E7%BC%96%E7%A8%8B"}},[t._v("面向容器接口编程")])])])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7"}},[t._v("常用技巧")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1-%E4%BD%BF%E7%94%A8%E5%85%83%E7%BB%84%E6%94%B9%E5%96%84%E5%88%86%E6%94%AF%E4%BB%A3%E7%A0%81"}},[t._v("1. 使用元组改善分支代码")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#2-%E5%9C%A8%E6%9B%B4%E5%A4%9A%E5%9C%B0%E6%96%B9%E4%BD%BF%E7%94%A8%E5%8A%A8%E6%80%81%E8%A7%A3%E5%8C%85"}},[t._v("2. 在更多地方使用动态解包")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#3-%E4%BD%BF%E7%94%A8-next-%E5%87%BD%E6%95%B0"}},[t._v("3. 使用 next() 函数")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#4-%E4%BD%BF%E7%94%A8%E6%9C%89%E5%BA%8F%E5%AD%97%E5%85%B8%E6%9D%A5%E5%8E%BB%E9%87%8D"}},[t._v("4. 使用有序字典来去重")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA"}},[t._v("常见误区")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"#1-%E5%BD%93%E5%BF%83%E9%82%A3%E4%BA%9B%E5%B7%B2%E7%BB%8F%E6%9E%AF%E7%AB%AD%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%99%A8"}},[t._v("1. 当心那些已经枯竭的迭代器")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#2-%E5%88%AB%E5%9C%A8%E5%BE%AA%E7%8E%AF%E4%BD%93%E5%86%85%E4%BF%AE%E6%94%B9%E8%A2%AB%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1"}},[t._v("2. 别在循环体内修改被迭代对象")])])])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E6%80%BB%E7%BB%93"}},[t._v("总结")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E7%B3%BB%E5%88%97%E5%85%B6%E4%BB%96%E6%96%87%E7%AB%A0"}},[t._v("系列其他文章")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#%E6%B3%A8%E8%A7%A3"}},[t._v("注解")])])]),t._v(" "),n("h3",{attrs:{id:"当我们谈论容器时-我们在谈些什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#当我们谈论容器时-我们在谈些什么"}},[t._v("#")]),t._v(" 当我们谈论容器时，我们在谈些什么？")]),t._v(" "),n("p",[t._v("我在前面给了“容器”一个简单的定义："),n("em",[t._v("专门用来装其他对象的就是容器")]),t._v("。但这个定义太宽泛了，无法对我们的日常编程产生什么指导价值。要真正掌握 Python 里的容器，需要分别从两个层面入手：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("底层实现")]),t._v("：内置容器类型使用了什么数据结构？某项操作如何工作？")]),t._v(" "),n("li",[n("strong",[t._v("高层抽象")]),t._v("：什么决定了某个对象是不是容器？哪些行为定义了容器？")])]),t._v(" "),n("p",[t._v("下面，让我们一起站在这两个不同的层面上，重新认识容器。")]),t._v(" "),n("h2",{attrs:{id:"底层看容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#底层看容器"}},[t._v("#")]),t._v(" 底层看容器")]),t._v(" "),n("p",[t._v("Python 是一门高级编程语言，"),n("strong",[t._v("它所提供的内置容器类型，都是经过高度封装和抽象后的结果")]),t._v("。和“链表”、“红黑树”、“哈希表”这些名字相比，所有 Python 内建类型的名字，都只描述了这个类型的功能特点，其他人完全没法只通过这些名字了解它们的哪怕一丁点内部细节。")]),t._v(" "),n("p",[t._v("这是 Python 编程语言的优势之一。相比 C 语言这类更接近计算机底层的编程语言，Python 重新设计并实现了对编程者更友好的内置容器类型，屏蔽掉了内存管理等额外工作。为我们提供了更好的开发体验。")]),t._v(" "),n("p",[t._v("但如果这是 Python 语言的优势的话，为什么我们还要费劲去了解容器类型的实现细节呢？答案是："),n("strong",[t._v("关注细节可以帮助我们编写出更快的代码。")])]),t._v(" "),n("h3",{attrs:{id:"写更快的代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写更快的代码"}},[t._v("#")]),t._v(" 写更快的代码")]),t._v(" "),n("h4",{attrs:{id:"_1-避免频繁扩充列表-创建新列表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-避免频繁扩充列表-创建新列表"}},[t._v("#")]),t._v(" 1. 避免频繁扩充列表/创建新列表")]),t._v(" "),n("p",[t._v("所有的内建容器类型都不限制容量。如果你愿意，你可以把递增的数字不断塞进一个空列表，最终撑爆整台机器的内存。")]),t._v(" "),n("p",[t._v("在 Python 语言的实现细节里，列表的内存是按需分配的"),n("a",{attrs:{href:"#annot1"}},[t._v("[注1]")]),t._v("，当某个列表当前拥有的内存不够时，便会触发内存扩容逻辑。而分配内存是一项昂贵的操作。虽然大部分情况下，它不会对你的程序性能产生什么严重的影响。但是当你处理的数据量特别大时，很容易因为内存分配拖累整个程序的性能。")]),t._v(" "),n("p",[t._v("还好，Python 早就意识到了这个问题，并提供了官方的问题解决指引，那就是："),n("strong",[t._v("“变懒”")]),t._v("。")]),t._v(" "),n("p",[t._v("如何解释“变懒”？"),n("code",[t._v("range()")]),t._v(" 函数的进化是一个非常好的例子。")]),t._v(" "),n("p",[t._v("在 Python 2 中，如果你调用 "),n("code",[t._v("range(100000000)")]),t._v("，需要等待好几秒才能拿到结果，因为它需要返回一个巨大的列表，花费了非常多的时间在内存分配与计算上。但在 Python 3 中，同样的调用马上就能拿到结果。因为函数返回的不再是列表，而是一个类型为 "),n("code",[t._v("range")]),t._v(" 的懒惰对象，只有在你迭代它、或是对它进行切片时，它才会返回真正的数字给你。")]),t._v(" "),n("p",[n("strong",[t._v("所以说，为了提高性能，内建函数 "),n("code",[t._v("range")]),t._v(" “变懒”了。")]),t._v(" 而为了避免过于频繁的内存分配，在日常编码中，我们的函数同样也需要变懒，这包括：")]),t._v(" "),n("ul",[n("li",[t._v("更多的使用 "),n("code",[t._v("yield")]),t._v(" 关键字，返回生成器对象")]),t._v(" "),n("li",[t._v("尽量使用生成器表达式替代列表推导表达式\n"),n("ul",[n("li",[t._v("生成器表达式："),n("code",[t._v("(i for i in range(100))")]),t._v(" 👍")]),t._v(" "),n("li",[t._v("列表推导表达式："),n("code",[t._v("[i for i in range(100)]")])])])]),t._v(" "),n("li",[t._v("尽量使用模块提供的懒惰对象：\n"),n("ul",[n("li",[t._v("使用 "),n("code",[t._v("re.finditer")]),t._v(" 替代 "),n("code",[t._v("re.findall")])]),t._v(" "),n("li",[t._v("直接使用可迭代的文件对象： "),n("code",[t._v("for line in fp")]),t._v("，而不是 "),n("code",[t._v("for line in fp.readlines()")])])])])]),t._v(" "),n("h4",{attrs:{id:"_2-在列表头部操作多的场景使用-deque-模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-在列表头部操作多的场景使用-deque-模块"}},[t._v("#")]),t._v(" 2. 在列表头部操作多的场景使用 deque 模块")]),t._v(" "),n("p",[t._v("列表是基于数组结构（Array）实现的，当你在列表的头部插入新成员（"),n("code",[t._v("list.insert(0, item)")]),t._v("）时，它后面的所有其他成员都需要被移动，操作的时间复杂度是 "),n("code",[t._v("O(n)")]),t._v("。这导致在列表的头部插入成员远比在尾部追加（"),n("code",[t._v("list.append(item)")]),t._v(" 时间复杂度为 "),n("code",[t._v("O(1)")]),t._v("）要慢。")]),t._v(" "),n("p",[t._v("如果你的代码需要执行很多次这类操作，请考虑使用 "),n("a",{attrs:{href:"https://docs.python.org/3.7/library/collections.html#collections.deque",target:"_blank",rel:"noopener noreferrer"}},[t._v("collections.deque"),n("OutboundLink")],1),t._v(" 类型来替代列表。因为 deque 是基于双端队列实现的，无论是在头部还是尾部追加元素，时间复杂度都是 "),n("code",[t._v("O(1)")]),t._v("。")]),t._v(" "),n("h4",{attrs:{id:"_3-使用集合-字典来判断成员是否存在"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用集合-字典来判断成员是否存在"}},[t._v("#")]),t._v(" 3. 使用集合/字典来判断成员是否存在")]),t._v(" "),n("p",[t._v("当你需要判断成员是否存在于某个容器时，用集合比列表更合适。因为 "),n("code",[t._v("item in [...]")]),t._v(" 操作的时间复杂度是 "),n("code",[t._v("O(n)")]),t._v("，而 "),n("code",[t._v("item in {...}")]),t._v(" 的时间复杂度是 "),n("code",[t._v("O(1)")]),t._v("。这是因为字典与集合都是基于哈希表（Hash Table）数据结构实现的。")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这个例子不是特别恰当，因为当目标集合特别小时，使用集合还是列表对效率的影响微乎其微")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 但这不是重点 :)")]),t._v("\nVALID_NAMES "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"piglei"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"raymond"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bojack"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"caroline"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 转换为集合类型专门用于成员判断")]),t._v("\nVALID_NAMES_SET "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VALID_NAMES"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("validate_name")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" VALID_NAMES_SET"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 此处使用了 Python 3.6 添加的 f-strings 特性")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("raise")]),t._v(" ValueError"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string-interpolation"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('f"')]),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v(' is not a valid name!"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("blockquote",[n("p",[t._v("Hint: 强烈建议阅读 "),n("a",{attrs:{href:"https://wiki.python.org/moin/TimeComplexity",target:"_blank",rel:"noopener noreferrer"}},[t._v("TimeComplexity - Python Wiki"),n("OutboundLink")],1),t._v("，了解更多关于常见容器类型的时间复杂度相关内容。")]),t._v(" "),n("p",[t._v("如果你对字典的实现细节感兴趣，也强烈建议观看 Raymond Hettinger 的演讲 "),n("a",{attrs:{href:"https://www.youtube.com/watch?v=p33CVV29OG8&t=1403s",target:"_blank",rel:"noopener noreferrer"}},[t._v("Modern Dictionaries(YouTube)"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"高层看容器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高层看容器"}},[t._v("#")]),t._v(" 高层看容器")]),t._v(" "),n("p",[t._v("Python 是一门“"),n("a",{attrs:{href:"https://en.wikipedia.org/wiki/Duck_typing",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸭子类型"),n("OutboundLink")],1),t._v("”语言："),n("em",[t._v("“当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”")]),t._v(" 所以，当我们说某个对象是什么类型时，在根本上其实指的是： "),n("strong",[t._v("这个对象满足了该类型的特定接口规范，可以被当成这个类型来使用。")]),t._v(" 而对于所有内置容器类型来说，同样如此。")]),t._v(" "),n("p",[t._v("打开位于 "),n("a",{attrs:{href:"https://docs.python.org/3.7/library/collections.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("collections"),n("OutboundLink")],1),t._v(" 模块下的 "),n("a",{attrs:{href:"https://docs.python.org/3/library/collections.abc.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("abc"),n("OutboundLink")],1),n("em",[t._v("（“抽象类 Abstract Base Classes”的首字母缩写）")]),t._v(" 子模块，可以找到所有与容器相关的接口（抽象类）"),n("a",{attrs:{href:"#annot2"}},[t._v("[注2]")]),t._v("定义。让我们分别看看那些内建容器类型都满足了什么接口：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("列表（list）")]),t._v("：满足 "),n("code",[t._v("Iterable")]),t._v("、"),n("code",[t._v("Sequence")]),t._v("、"),n("code",[t._v("MutableSequence")]),t._v(" 等接口")]),t._v(" "),n("li",[n("strong",[t._v("元组（tuple）")]),t._v("：满足 "),n("code",[t._v("Iterable")]),t._v("、"),n("code",[t._v("Sequence")])]),t._v(" "),n("li",[n("strong",[t._v("字典（dict）")]),t._v("：满足 "),n("code",[t._v("Iterable")]),t._v("、"),n("code",[t._v("Mapping")]),t._v("、"),n("code",[t._v("MutableMapping")]),t._v(" "),n("a",{attrs:{href:"#annot3"}},[t._v("[注3]")])]),t._v(" "),n("li",[n("strong",[t._v("集合（set）")]),t._v("：满足 "),n("code",[t._v("Iterable")]),t._v("、"),n("code",[t._v("Set")]),t._v("、"),n("code",[t._v("MutableSet")]),t._v(" "),n("a",{attrs:{href:"#annot4"}},[t._v("[注4]")])])]),t._v(" "),n("p",[t._v("每个内置容器类型，其实就是满足了多个接口定义的组合实体。比如所有的容器类型都满足 "),n("code",[t._v("“可被迭代的”（Iterable")]),t._v("） 这个接口，这意味着它们都是“可被迭代”的。但是反过来，不是所有“可被迭代”的对象都是容器。就像字符串虽然可以被迭代，但我们通常不会把它当做“容器”来看待。")]),t._v(" "),n("p",[t._v("了解这个事实后，我们将"),n("strong",[t._v("在 Python 里重新认识")]),t._v("面向对象编程中最重要的原则之一："),n("strong",[t._v("面向接口而非具体实现来编程。")])]),t._v(" "),n("p",[t._v("让我们通过一个例子，看看如何理解 Python 里的“面向接口编程”。")]),t._v(" "),n("h3",{attrs:{id:"写扩展性更好的代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写扩展性更好的代码"}},[t._v("#")]),t._v(" 写扩展性更好的代码")]),t._v(" "),n("p",[t._v("某日，我们接到一个需求："),n("em",[t._v("有一个列表，里面装着很多用户评论，为了在页面正常展示，需要将所有超过一定长度的评论用省略号替代")]),t._v("。")]),t._v(" "),n("p",[t._v("这个需求很好做，很快我们就写出了第一个版本的代码：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注：为了加强示例代码的说明性，本文中的部分代码片段使用了Python 3.5")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 版本添加的 Type Hinting 特性")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_ellipsis")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" typing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("List"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""如果评论列表里的内容超过 max_length，剩下的字符用省略号代替\n    """')]),t._v("\n    index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" comment "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        comment "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("\n        index "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" comments\n\n\ncomments "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Implementation note"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Changed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABC for generator"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add_ellipsis"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Implementati...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changed")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ABC for gene...")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br")])]),n("p",[t._v("上面的代码里，"),n("code",[t._v("add_ellipsis")]),t._v(" 函数接收一个列表作为参数，然后遍历它，替换掉需要修改的成员。这一切看上去很合理，因为我们接到的最原始需求就是：“有一个 "),n("strong",[t._v("列表")]),t._v("，里面...”。"),n("strong",[t._v("但如果有一天，我们拿到的评论不再是被继续装在列表里，而是在不可变的元组里呢？")])]),t._v(" "),n("p",[t._v("那样的话，现有的函数设计就会逼迫我们写出 "),n("code",[t._v("add_ellipsis(list(comments))")]),t._v(" 这种即慢又难看的代码了。😨")]),t._v(" "),n("h4",{attrs:{id:"面向容器接口编程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面向容器接口编程"}},[t._v("#")]),t._v(" 面向容器接口编程")]),t._v(" "),n("p",[t._v("我们需要改进函数来避免这个问题。因为 "),n("code",[t._v("add_ellipsis")]),t._v(" 函数强依赖了列表类型，所以当参数类型变为元组时，现在的函数就不再适用了*（原因：给 "),n("code",[t._v("comments[index]")]),t._v(" 赋值的地方会抛出 "),n("code",[t._v("TypeError")]),t._v(" 异常）。* 如何改善这部分的设计？秘诀就是："),n("strong",[t._v("让函数依赖“可迭代对象”这个抽象概念，而非实体列表类型。")])]),t._v(" "),n("p",[t._v("使用生成器特性，函数可以被改成这样：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add_ellipsis_gen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" typing"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Iterable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""如果可迭代评论里的内容超过 max_length，剩下的字符用省略号代替\n    """')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" comment "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        comment "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("strip"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("max_length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'...'")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" comment\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add_ellipsis_gen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br")])]),n("p",[t._v("在新函数里，我们将依赖的参数类型从列表改成了可迭代的抽象类。这样做有很多好处，一个最明显的就是：无论评论是来自列表、元组或是某个文件，新函数都可以轻松满足：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理放在元组里的评论")]),t._v("\ncomments "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Implementation note"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Changed"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ABC for generator"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("join"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("add_ellipsis_gen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理放在文件里的评论")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("open")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"comments"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" fp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" comment "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" add_ellipsis_gen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("将依赖由某个具体的容器类型改为抽象接口后，函数的适用面变得更广了。除此之外，新函数在执行效率等方面也都更有优势。现在让我们再回到之前的问题。"),n("strong",[t._v("从高层来看，什么定义了容器？")])]),t._v(" "),n("p",[t._v("答案是： "),n("strong",[t._v("各个容器类型实现的接口协议定义了容器。")]),t._v(" 不同的容器类型在我们的眼里，应该是 "),n("code",[t._v("是否可以迭代")]),t._v("、"),n("code",[t._v("是否可以修改")]),t._v("、"),n("code",[t._v("有没有长度")]),t._v(" 等各种特性的组合。我们需要在编写相关代码时，"),n("strong",[t._v("更多的关注容器的抽象属性，而非容器类型本身")]),t._v("，这样可以帮助我们写出更优雅、扩展性更好的代码。")]),t._v(" "),n("blockquote",[n("p",[t._v("Hint：在 "),n("a",{attrs:{href:"https://docs.python.org/3/library/itertools.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("itertools"),n("OutboundLink")],1),t._v(" 与 "),n("a",{attrs:{href:"https://pypi.org/project/more-itertools/",target:"_blank",rel:"noopener noreferrer"}},[t._v("more-itertools"),n("OutboundLink")],1),t._v(" 模块里可以找到更多关于处理可迭代对象的宝藏。")])]),t._v(" "),n("h2",{attrs:{id:"常用技巧"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用技巧"}},[t._v("#")]),t._v(" 常用技巧")]),t._v(" "),n("h3",{attrs:{id:"_1-使用元组改善分支代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用元组改善分支代码"}},[t._v("#")]),t._v(" 1. 使用元组改善分支代码")]),t._v(" "),n("p",[t._v("有时，我们的代码里会出现超过三个分支的 "),n("code",[t._v("if/else")]),t._v(" 。就像下面这样：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" time\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("from_now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""接收一个过去的时间戳，返回距离当前时间的相对时间文字描述\n    """')]),t._v("\n    now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"less than 1 second ago"')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} seconds ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seconds_delta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} minutes ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} hours ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{} days ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\nnow "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from_now"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("87500")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT:")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# less than 1 second ago")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 24 seconds ago")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 10 minutes ago")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 hours ago")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1 days ago")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br")])]),n("p",[t._v("上面这个函数挑不出太多毛病，很多很多人都会写出类似的代码。但是，如果你仔细观察它，可以在分支代码部分找到一些明显的“"),n("strong",[t._v("边界")]),t._v("”。 比如，当函数判断某个时间是否应该用“秒数”展示时，用到了 "),n("code",[t._v("60")]),t._v("。而判断是否应该用分钟时，用到了 "),n("code",[t._v("3600")]),t._v("。")]),t._v(" "),n("p",[n("strong",[t._v("从边界提炼规律是优化这段代码的关键。")]),t._v(" 如果我们将所有的这些边界放在一个有序元组中，然后配合二分查找模块 "),n("a",{attrs:{href:"https://docs.python.org/3.7/library/bisect.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("bisect"),n("OutboundLink")],1),t._v("。整个函数的控制流就能被大大简化：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" bisect\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# BREAKPOINTS 必须是已经排好序的，不然无法进行二分查找")]),t._v("\nBREAKPOINTS "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nTMPLS "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# unit, template")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"less than 1 second ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{units} seconds ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("60")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{units} minutes ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{units} hours ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{units} days ago"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("from_now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""接收一个过去的时间戳，返回距离当前时间的相对时间文字描述\n    """')]),t._v("\n    seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("time"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" ts"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    unit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tmpl "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TMPLS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("bisect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bisect"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BREAKPOINTS"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" seconds_delta"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tmpl"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("units"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("seconds_delta "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" unit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br")])]),n("p",[t._v("除了用元组可以优化过多的 "),n("code",[t._v("if/else")]),t._v(" 分支外，有些情况下字典也能被用来做同样的事情。关键在于从现有代码找到重复的逻辑与规律，并多多尝试。")]),t._v(" "),n("h3",{attrs:{id:"_2-在更多地方使用动态解包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-在更多地方使用动态解包"}},[t._v("#")]),t._v(" 2. 在更多地方使用动态解包")]),t._v(" "),n("p",[t._v("动态解包操作是指使用 "),n("code",[t._v("*")]),t._v(" 或 "),n("code",[t._v("**")]),t._v(" 运算符将可迭代对象“解开”的行为，在 Python 2 时代，这个操作只能被用在函数参数部分，并且对出现顺序和数量都有非常严格的要求，使用场景非常单一。")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("calc")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" multiplier"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" multiplier\n\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Python2 中只支持在函数参数部分进行动态解包")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" calc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"multiplier"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT: 30")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("不过，Python 3 尤其是 3.5 版本后，"),n("code",[t._v("*")]),t._v(" 和 "),n("code",[t._v("**")]),t._v(" 的使用场景被大大扩充了。举个例子，在 Python 2 中，如果我们需要合并两个字典，需要这么做：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("merge_dict")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 因为字典是可被修改的对象，为了避免修改原对象，此处需要复制一个 d1 的浅拷贝")]),t._v("\n    result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" d1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("copy"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("update"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n    \nuser "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" merge_dict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"piglei"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"movies"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Fight Club"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("但是在 Python 3.5 以后的版本，你可以直接用 "),n("code",[t._v("**")]),t._v(" 运算符来快速完成字典的合并操作：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('user = {**{"name": "piglei"}, **{"movies": ["Fight Club"]}}\n')])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("除此之外，你还可以在普通赋值语句中使用 "),n("code",[t._v("*")]),t._v(" 运算符来动态的解包可迭代对象。如果你想详细了解相关内容，可以阅读下面推荐的 PEP。")]),t._v(" "),n("blockquote",[n("p",[t._v("Hint：推进动态解包场景扩充的两个 PEP：")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-3132/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 3132 -- Extended Iterable Unpacking | Python.org"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0448/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PEP 448 -- Additional Unpacking Generalizations | Python.org"),n("OutboundLink")],1)])])]),t._v(" "),n("h3",{attrs:{id:"_3-使用-next-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-next-函数"}},[t._v("#")]),t._v(" 3. 使用 next() 函数")]),t._v(" "),n("p",[n("code",[t._v("next()")]),t._v(" 是一个非常实用的内建函数，它接收一个迭代器作为参数，然后返回该迭代器的下一个元素。使用它配合生成器表达式，可以高效的实现*“从列表中查找第一个满足条件的成员”* 之类的需求。")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取并 **立即返回** 列表里的第一个偶数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("next")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" numbers "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT: 8")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("h3",{attrs:{id:"_4-使用有序字典来去重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用有序字典来去重"}},[t._v("#")]),t._v(" 4. 使用有序字典来去重")]),t._v(" "),n("p",[t._v("字典和集合的结构特点保证了它们的成员不会重复，所以它们经常被用来去重。但是，使用它们俩去重后的结果会丢失原有列表的顺序。这是由底层数据结构“哈希表（Hash Table）”的特点决定的。")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" l "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 去重但是丢失了顺序")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("如果既需要去重又必须保留顺序怎么办？我们可以使用 "),n("code",[t._v("collections.OrderedDict")]),t._v(" 模块:")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" collections "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" OrderedDict\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("list")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderedDict"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fromkeys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br")])]),n("blockquote",[n("p",[t._v("Hint: 在 Python 3.6 中，默认的字典类型修改了实现方式，已经变成有序的了。并且在 Python 3.7 中，该功能已经从 "),n("strong",[t._v("语言的实现细节")]),t._v(" 变成了为 "),n("strong",[t._v("可依赖的正式语言特性")]),t._v("。")]),t._v(" "),n("p",[t._v("但是我觉得让整个 Python 社区习惯这一点还需要一些时间，毕竟目前“字典是无序的”还是被印在无数本 Python 书上。所以，我仍然建议在一切需要有序字典的地方使用 OrderedDict。")])]),t._v(" "),n("h2",{attrs:{id:"常见误区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见误区"}},[t._v("#")]),t._v(" 常见误区")]),t._v(" "),n("h3",{attrs:{id:"_1-当心那些已经枯竭的迭代器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-当心那些已经枯竭的迭代器"}},[t._v("#")]),t._v(" 1. 当心那些已经枯竭的迭代器")]),t._v(" "),n("p",[t._v("在文章前面，我们提到了使用“懒惰”生成器的种种好处。但是，所有事物都有它的两面性。生成器的最大的缺点之一就是："),n("strong",[t._v("它会枯竭")]),t._v("。当你完整遍历过它们后，之后的重复遍历就不能拿到任何新内容了。")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[t._v("numbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nnumbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 第一次循环会输出 2, 4, 6")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 这次循环什么都不会输出，因为迭代器已经枯竭了")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("而且不光是生成器表达式，Python 3 里的 map、filter 内建函数也都有一样的特点。忽视这个特点很容易导致代码中出现一些难以察觉的 Bug。")]),t._v(" "),n("p",[t._v("Instagram 就在项目从 Python 2 到 Python 3 的迁移过程中碰到了这个问题。它们在 PyCon 2017 上分享了对付这个问题的故事。访问文章 "),n("a",{attrs:{href:"https://www.zlovezl.cn/articles/instagram-pycon-2017/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Instagram 在 PyCon 2017 的演讲摘要"),n("OutboundLink")],1),t._v("，搜索“迭代器”可以查看详细内容。")]),t._v(" "),n("h3",{attrs:{id:"_2-别在循环体内修改被迭代对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-别在循环体内修改被迭代对象"}},[t._v("#")]),t._v(" 2. 别在循环体内修改被迭代对象")]),t._v(" "),n("p",[t._v("这是一个很多 Python 初学者会犯的错误。比如，我们需要一个函数来删掉列表里的所有偶数：")]),t._v(" "),n("div",{staticClass:"language-python line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove_even")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v('"""去掉列表里所有的偶数\n    """')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("enumerate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 有问题的代码")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("del")]),t._v(" numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n\nnumbers "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nremove_even"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numbers"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# OUTPUT: [1, 7, 8, 11]")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br")])]),n("p",[t._v("注意到结果里那个多出来的 “8” 了吗？当你在遍历一个列表的同时修改它，就会出现这样的事情。因为被迭代的对象 "),n("code",[t._v("numbers")]),t._v(" 在循环过程中被修改了。"),n("strong",[t._v("遍历的下标在不断增长，而列表本身的长度同时又在不断缩减。这样就会导致列表里的一些成员其实根本就没有被遍历到。")])]),t._v(" "),n("p",[t._v("所以对于这类操作，请使用一个新的空列表保存结果，或者利用 "),n("code",[t._v("yield")]),t._v(" 返回一个生成器。而不是修改被迭代的列表或是字典对象本身。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[t._v("在这篇文章中，我们首先从“容器类型”的定义出发，在底层和高层两个层面探讨了容器类型。之后遵循系列文章传统，提供了一些编写容器相关代码时的技巧。")]),t._v(" "),n("p",[t._v("让我们最后再总结一下要点：")]),t._v(" "),n("ul",[n("li",[t._v("了解容器类型的底层实现，可以帮助你写出性能更好的代码")]),t._v(" "),n("li",[t._v("提炼需求里的抽象概念，面向接口而非实现编程")]),t._v(" "),n("li",[t._v("多使用“懒惰”的对象，少生成“迫切”的列表")]),t._v(" "),n("li",[t._v("使用元组和字典可以简化分支代码结构")]),t._v(" "),n("li",[t._v("使用 "),n("code",[t._v("next()")]),t._v(" 函数配合迭代器可以高效完成很多事情，但是也需要注意“枯竭”问题")]),t._v(" "),n("li",[t._v("collections、itertools 模块里有非常多有用的工具，快去看看吧！")])]),t._v(" "),n("p",[t._v("看完文章的你，有没有什么想吐槽的？请留言或者在 "),n("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目 Github Issues"),n("OutboundLink")],1),t._v(" 告诉我吧。")]),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/docs/python-craftsman/5-function-returning-tips.html"}},[t._v(">>>下一篇【5.让函数返回结果的技巧】")])],1),t._v(" "),n("p",[n("RouterLink",{attrs:{to:"/docs/python-craftsman/3-tips-on-numbers-and-strings.html"}},[t._v("<<<上一篇【3.使用数字与字符串的技巧】")])],1),t._v(" "),n("h2",{attrs:{id:"系列其他文章"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#系列其他文章"}},[t._v("#")]),t._v(" 系列其他文章")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[t._v("所有文章索引 [Github]"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.zlovezl.cn/articles/python-using-variables-well/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 工匠：善用变量改善代码质量"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.zlovezl.cn/articles/python-else-block-secrets/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 工匠：编写条件分支代码的技巧"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{href:"https://www.zlovezl.cn/articles/tips-on-numbers-and-strings/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Python 工匠：使用数字与字符串的技巧"),n("OutboundLink")],1)])]),t._v(" "),n("h2",{attrs:{id:"注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),n("ol",[n("li",[n("a",{attrs:{id:"annot1"}}),t._v("Python 这门语言除了 CPython 外，还有许许多多的其他版本实现。如无特别说明，本文以及 “Python 工匠” 系列里出现的所有 Python 都特指 Python 的 C 语言实现 CPython")]),t._v(" "),n("li",[n("a",{attrs:{id:"annot2"}}),t._v("Python 里没有类似其他编程语言里的“Interface 接口”类型，只有类似的“抽象类”概念。为了表达方便，后面的内容均统一使用“接口”来替代“抽象类”。")]),t._v(" "),n("li",[n("a",{attrs:{id:"annot3"}}),t._v("有没有只实现了 Mapping 但又不是 MutableMapping 的类型？试试 "),n("a",{attrs:{href:"https://docs.python.org/3/library/types.html#types.MappingProxyType",target:"_blank",rel:"noopener noreferrer"}},[t._v("MappingProxyType({})"),n("OutboundLink")],1)]),t._v(" "),n("li",[n("a",{attrs:{id:"annot4"}}),t._v("有没有只实现了 Set 但又不是 MutableSet 的类型？试试 "),n("a",{attrs:{href:"https://docs.python.org/3/library/stdtypes.html#frozenset",target:"_blank",rel:"noopener noreferrer"}},[t._v("frozenset()"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);