(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{593:function(s,t,a){"use strict";a.r(t);var n=a(13),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"序言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#序言"}},[s._v("#")]),s._v(" 序言")]),s._v(" "),a("blockquote",[a("p",[s._v("这是 “Python 工匠”系列的第 2 篇文章。"),a("a",{attrs:{href:"https://github.com/piglei/one-python-craftsman",target:"_blank",rel:"noopener noreferrer"}},[s._v("[查看系列所有文章]"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("编写条件分支代码是编码过程中不可或缺的一部分。")]),s._v(" "),a("p",[s._v("如果用道路来做比喻，现实世界中的代码从来都不是一条笔直的高速公路，而更像是由无数个岔路口组成的某个市区地图。我们编码者就像是驾驶员，需要告诉我们的程序，下个路口需要往左还是往右。")]),s._v(" "),a("p",[s._v("编写优秀的条件分支代码非常重要，因为糟糕、复杂的分支处理非常容易让人困惑，从而降低代码质量。所以，这篇文章将会种重点谈谈在 Python 中编写分支代码应该注意的地方。")]),s._v(" "),a("h3",{attrs:{id:"内容目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内容目录"}},[s._v("#")]),s._v(" 内容目录")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5"}},[s._v("最佳实践")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E9%81%BF%E5%85%8D%E5%A4%9A%E5%B1%82%E5%88%86%E6%94%AF%E5%B5%8C%E5%A5%97"}},[s._v("1. 避免多层分支嵌套")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#2-%E5%B0%81%E8%A3%85%E9%82%A3%E4%BA%9B%E8%BF%87%E4%BA%8E%E5%A4%8D%E6%9D%82%E7%9A%84%E9%80%BB%E8%BE%91%E5%88%A4%E6%96%AD"}},[s._v("2. 封装那些过于复杂的逻辑判断")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#3-%E7%95%99%E6%84%8F%E4%B8%8D%E5%90%8C%E5%88%86%E6%94%AF%E4%B8%8B%E7%9A%84%E9%87%8D%E5%A4%8D%E4%BB%A3%E7%A0%81"}},[s._v("3. 留意不同分支下的重复代码")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#4-%E8%B0%A8%E6%85%8E%E4%BD%BF%E7%94%A8%E4%B8%89%E5%85%83%E8%A1%A8%E8%BE%BE%E5%BC%8F"}},[s._v("4. 谨慎使用三元表达式")])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E6%8A%80%E5%B7%A7"}},[s._v("常见技巧")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E4%BD%BF%E7%94%A8%E5%BE%B7%E6%91%A9%E6%A0%B9%E5%AE%9A%E5%BE%8B"}},[s._v("1. 使用“德摩根定律”")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#2-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B8%83%E5%B0%94%E7%9C%9F%E5%81%87"}},[s._v("2. 自定义对象的“布尔真假”")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#3-%E5%9C%A8%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E4%B8%AD%E4%BD%BF%E7%94%A8-all--any"}},[s._v("3. 在条件判断中使用 all() / any()")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#4-%E4%BD%BF%E7%94%A8-trywhilefor-%E4%B8%AD-else-%E5%88%86%E6%94%AF"}},[s._v("4. 使用 try/while/for 中 else 分支")])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E5%B8%B8%E8%A7%81%E9%99%B7%E9%98%B1"}},[s._v("常见陷阱")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-%E4%B8%8E-none-%E5%80%BC%E7%9A%84%E6%AF%94%E8%BE%83"}},[s._v("1. 与 None 值的比较")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#2-%E7%95%99%E6%84%8F-and-%E5%92%8C-or-%E7%9A%84%E8%BF%90%E7%AE%97%E4%BC%98%E5%85%88%E7%BA%A7"}},[s._v("2. 留意 and 和 or 的运算优先级")])])])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E7%BB%93%E8%AF%AD"}},[s._v("结语")])]),s._v(" "),a("li",[a("a",{attrs:{href:"#%E6%B3%A8%E8%A7%A3"}},[s._v("注解")])])]),s._v(" "),a("h3",{attrs:{id:"python-里的分支代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#python-里的分支代码"}},[s._v("#")]),s._v(" Python 里的分支代码")]),s._v(" "),a("p",[s._v("Python 支持最为常见的 "),a("code",[s._v("if/else")]),s._v(" 条件分支语句，不过它缺少在其他编程语言中常见的 "),a("code",[s._v("switch/case")]),s._v(" 语句。")]),s._v(" "),a("p",[s._v("除此之外，Python 还为 "),a("code",[s._v("for/while")]),s._v(" 循环以及 "),a("code",[s._v("try/except")]),s._v(" 语句提供了 else 分支，在一些特殊的场景下，它们可以大显身手。")]),s._v(" "),a("p",[s._v("下面我会从 "),a("code",[s._v("最佳实践")]),s._v("、"),a("code",[s._v("常见技巧")]),s._v("、"),a("code",[s._v("常见陷阱")]),s._v(" 三个方面讲一下如果编写优秀的条件分支代码。")]),s._v(" "),a("h2",{attrs:{id:"最佳实践"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[s._v("#")]),s._v(" 最佳实践")]),s._v(" "),a("h3",{attrs:{id:"_1-避免多层分支嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-避免多层分支嵌套"}},[s._v("#")]),s._v(" 1. 避免多层分支嵌套")]),s._v(" "),a("p",[s._v("如果这篇文章只能删减成一句话就结束，那么那句话一定是**“要竭尽所能的避免分支嵌套”**。")]),s._v(" "),a("p",[s._v("过深的分支嵌套是很多编程新手最容易犯的错误之一。假如有一位新手 JavaScript 程序员写了很多层分支嵌套，那么你可能会看到一层又一层的大括号："),a("code",[s._v("if { if { if { ... }}}")]),s._v("。俗称*“嵌套 if 地狱（Nested If Statement Hell）”*。")]),s._v(" "),a("p",[s._v("但是因为 Python 使用了缩进来代替 "),a("code",[s._v("{}")]),s._v("，所以过深的嵌套分支会产生比其他语言下更为严重的后果。比如过多的缩进层次很容易就会让代码超过 "),a("a",{attrs:{href:"https://www.python.org/dev/peps/pep-0008/",target:"_blank",rel:"noopener noreferrer"}},[s._v("PEP8"),a("OutboundLink")],1),s._v(" 中规定的每行字数限制。让我们看看这段代码：")]),s._v(" "),a("div",{staticClass:"language-Python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("buy_fruit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""去水果店买苹果\n    \n    - 先得看看店是不是在营业\n    - 如果有苹果的话，就买 1 个\n    - 如果钱不够，就回家取钱再来\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("has_stocks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("can_afford"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("buy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("go_home_and_get_money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" buy_fruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" MadAtNoFruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"no apple in store!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" MadAtNoFruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"store is closed!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("上面这段代码最大的问题，就是过于直接翻译了原始的条件分支要求，导致短短十几行代码包含了有三层嵌套分支。")]),s._v(" "),a("p",[s._v("这样的代码可读性和维护性都很差。不过我们可以用一个很简单的技巧："),a("strong",[s._v("“提前结束”")]),s._v(" 来优化这段代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("buy_fruit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_open"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" MadAtNoFruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"store is closed!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("has_stocks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" MadAtNoFruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"no apple in store!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("can_afford"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("price"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("buy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apple"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" amount"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("go_home_and_get_money"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" buy_fruit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nerd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" store"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("“提前结束”指：**在函数内使用 "),a("code",[s._v("return")]),s._v(" 或 "),a("code",[s._v("raise")]),s._v(" 等语句提前在分支内结束函数。**比如，在新的 "),a("code",[s._v("buy_fruit")]),s._v(" 函数里，当分支条件不满足时，我们直接抛出异常，结束这段这代码分支。这样的代码没有嵌套分支，更直接也更易读。")]),s._v(" "),a("h3",{attrs:{id:"_2-封装那些过于复杂的逻辑判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-封装那些过于复杂的逻辑判断"}},[s._v("#")]),s._v(" 2. 封装那些过于复杂的逻辑判断")]),s._v(" "),a("p",[s._v("如果条件分支里的表达式过于复杂，出现了太多的 "),a("code",[s._v("not/and/or")]),s._v("，那么这段代码的可读性就会大打折扣，比如下面这段代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("# 如果活动还在开放，并且活动剩余名额大于 10，为所有性别为女性，或者级别大于 3\n# 的活跃用户发放 10000 个金币\nif activity.is_active and activity.remaining > 10 and \\\n        user.is_active and (user.sex == 'female' or user.level > 3):\n    user.add_coins(10000)\n    return\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("对于这样的代码，我们可以考虑将具体的分支逻辑封装成函数或者方法，来达到简化代码的目的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("if activity.allow_new_user() and user.match_activity_condition():\n    user.add_coins(10000)\n    return\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("事实上，将代码改写后，之前的注释文字其实也可以去掉了。**因为后面这段代码已经达到了自说明的目的。**至于具体的 "),a("em",[s._v("什么样的用户满足活动条件？")]),s._v(" 这种问题，就应由具体的 "),a("code",[s._v("match_activity_condition()")]),s._v(" 方法来回答了。")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("Hint:")]),s._v(" 恰当的封装不光直接改善了代码的可读性，事实上，如果上面的活动判断逻辑在代码中出现了不止一次的话，封装更是必须的。不然重复代码会极大的破坏这段逻辑的可维护性。")])]),s._v(" "),a("h3",{attrs:{id:"_3-留意不同分支下的重复代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-留意不同分支下的重复代码"}},[s._v("#")]),s._v(" 3. 留意不同分支下的重复代码")]),s._v(" "),a("p",[s._v("重复代码是代码质量的天敌，而条件分支语句又非常容易成为重复代码的重灾区。所以，当我们编写条件分支语句时，需要特别留意，不要生产不必要的重复代码。")]),s._v(" "),a("p",[s._v("让我们看下这个例子：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于新用户，创建新的用户资料，否则更新旧资料")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("no_profile_exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    create_user_profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        address"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于新建用户，将用户的积分置为 0")]),s._v("\n        points"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        created"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    update_user_profile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n        username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        address"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        updated"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("在上面的代码中，我们可以一眼看出，在不同的分支下，程序调用了不同的函数，做了不一样的事情。但是，因为那些重复代码的存在，"),a("strong",[s._v("我们却很难简单的区分出，二者的不同点到底在哪。")])]),s._v(" "),a("p",[s._v("其实，得益于 Python 的动态特性，我们可以简单的改写一下上面的代码，让可读性可以得到显著的提升：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("no_profile_exists"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    profile_func "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" create_user_profile\n    extra_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'points'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'created'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    profile_func "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" update_user_profile\n    extra_args "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'updated'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nprofile_func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    username"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    email"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    address"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("address"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("extra_args\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("当你编写分支代码时，请额外关注"),a("strong",[s._v("由分支产生的重复代码块")]),s._v("，如果可以简单的消灭它们，那就不要迟疑。")]),s._v(" "),a("h3",{attrs:{id:"_4-谨慎使用三元表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-谨慎使用三元表达式"}},[s._v("#")]),s._v(" 4. 谨慎使用三元表达式")]),s._v(" "),a("p",[s._v("三元表达式是 Python 2.5 版本后才支持的语法。在那之前，Python 社区一度认为三元表达式没有必要，我们需要使用 "),a("code",[s._v("x and a or b")]),s._v(" 的方式来模拟它。"),a("a",{attrs:{href:"#annot1"}},[s._v("[注]")])]),s._v(" "),a("p",[s._v("事实是，在很多情况下，使用普通的 "),a("code",[s._v("if/else")]),s._v(" 语句的代码可读性确实更好。盲目追求三元表达式很容易诱惑你写出复杂、可读性差的代码。")]),s._v(" "),a("p",[s._v("所以，请记得只用三元表达式处理简单的逻辑分支。")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[s._v("language "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"python"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" you"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("favor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dynamic"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"golang"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("对于绝大多数情况，还是使用普通的 "),a("code",[s._v("if/else")]),s._v(" 语句吧。")]),s._v(" "),a("h2",{attrs:{id:"常见技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见技巧"}},[s._v("#")]),s._v(" 常见技巧")]),s._v(" "),a("h3",{attrs:{id:"_1-使用-德摩根定律"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用-德摩根定律"}},[s._v("#")]),s._v(" 1. 使用“德摩根定律”")]),s._v(" "),a("p",[s._v("在做分支判断时，我们有时候会写成这样的代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果用户没有登录或者用户没有使用 chrome，拒绝提供服务")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("has_logged_in "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_from_chrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"our service is only available for chrome logged in user"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("第一眼看到代码时，是不是需要思考一会才能理解它想干嘛？这是因为上面的逻辑表达式里面出现了 2 个 "),a("code",[s._v("not")]),s._v(" 和 1 个 "),a("code",[s._v("or")]),s._v("。而我们人类恰好不擅长处理过多的“否定”以及“或”这种逻辑关系。")]),s._v(" "),a("p",[s._v("这个时候，就该 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%BE%B7%E6%91%A9%E6%A0%B9%E5%AE%9A%E5%BE%8B",target:"_blank",rel:"noopener noreferrer"}},[s._v("德摩根定律"),a("OutboundLink")],1),s._v(" 出场了。通俗的说，德摩根定律就是 "),a("code",[s._v("not A or not B")]),s._v(" 等价于 "),a("code",[s._v("not (A and B)")]),s._v("。通过这样的转换，上面的代码可以改写成这样：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("has_logged_in "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("is_from_chrome"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"our service is only available for chrome logged in user"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("怎么样，代码是不是易读了很多？记住德摩根定律，很多时候它对于简化条件分支里的代码逻辑非常有用。")]),s._v(" "),a("h3",{attrs:{id:"_2-自定义对象的-布尔真假"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义对象的-布尔真假"}},[s._v("#")]),s._v(" 2. 自定义对象的“布尔真假”")]),s._v(" "),a("p",[s._v("我们常说，在 Python 里，“万物皆对象”。其实，不光“万物皆对象”，我们还可以利用很多魔法方法*（文档中称为："),a("a",{attrs:{href:"https://docs.python.org/3/reference/datamodel.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("user-defined method"),a("OutboundLink")],1),s._v("）*，来自定义对象的各种行为。我们可以用很多在别的语言里面无法做到、有些魔法的方式来影响代码的执行。")]),s._v(" "),a("p",[s._v("比如，Python 的所有对象都有自己的“布尔真假”：")]),s._v(" "),a("ul",[a("li",[s._v("布尔值为假的对象："),a("code",[s._v("None")]),s._v(", "),a("code",[s._v("0")]),s._v(", "),a("code",[s._v("False")]),s._v(", "),a("code",[s._v("[]")]),s._v(", "),a("code",[s._v("()")]),s._v(", "),a("code",[s._v("{}")]),s._v(", "),a("code",[s._v("set()")]),s._v(", "),a("code",[s._v("frozenset()")]),s._v(", ... ...")]),s._v(" "),a("li",[s._v("布尔值为真的对象：非 "),a("code",[s._v("0")]),s._v(" 的数值、"),a("code",[s._v("True")]),s._v("，非空的序列、元组，普通的用户类实例，... ...")])]),s._v(" "),a("p",[s._v("通过内建函数 "),a("code",[s._v("bool()")]),s._v("，你可以很方便的查看某个对象的布尔真假。而 Python 进行条件分支判断时用到的也是这个值：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("重点来了，虽然所有用户类实例的布尔值都是真。但是 Python 提供了改变这个行为的办法："),a("strong",[s._v("自定义类的 "),a("code",[s._v("__bool__")]),s._v(" 魔法方法")]),s._v(" "),a("em",[s._v("（在 Python 2.X 版本中为 "),a("code",[s._v("__nonzero__")]),s._v("）")]),s._v("。当类定义了 "),a("code",[s._v("__bool__")]),s._v(" 方法后，它的返回值将会被当作类实例的布尔值。")]),s._v(" "),a("p",[s._v("另外，"),a("code",[s._v("__bool__")]),s._v(" 不是影响实例布尔真假的唯一方法。如果类没有定义 "),a("code",[s._v("__bool__")]),s._v(" 方法，Python 还会尝试调用 "),a("code",[s._v("__len__")]),s._v(" 方法*（也就是对任何序列对象调用 "),a("code",[s._v("len")]),s._v(" 函数）*，通过结果是否为 "),a("code",[s._v("0")]),s._v(" 判断实例真假。")]),s._v(" "),a("p",[s._v("那么这个特性有什么用呢？看看下面这段代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_users "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" users\n\n\nusers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" UserCollection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("piglei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" raymond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There\'s some users in collection!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面的代码里，判断 "),a("code",[s._v("UserCollection")]),s._v(" 是否有内容时用到了 "),a("code",[s._v("users._users")]),s._v(" 的长度。其实，通过为 "),a("code",[s._v("UserCollection")]),s._v(" 添加 "),a("code",[s._v("__len__")]),s._v(" 魔法方法，上面的分支可以变得更简单：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("UserCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_users "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" users\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__len__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n\nusers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" UserCollection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("piglei"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" raymond"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义了 __len__ 方法后，UserCollection 对象本身就可以被用于布尔判断了")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"There\'s some users in collection!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("通过定义魔法方法 "),a("code",[s._v("__len__")]),s._v(" 和 "),a("code",[s._v("__bool__")]),s._v(" ，我们可以让类自己控制想要表现出的布尔真假值，让代码变得更 pythonic。")]),s._v(" "),a("h3",{attrs:{id:"_3-在条件判断中使用-all-any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-在条件判断中使用-all-any"}},[s._v("#")]),s._v(" 3. 在条件判断中使用 all() / any()")]),s._v(" "),a("p",[a("code",[s._v("all()")]),s._v(" 和 "),a("code",[s._v("any()")]),s._v(" 两个函数非常适合在条件判断中使用。这两个函数接受一个可迭代对象，返回一个布尔值，其中：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("all(seq)")]),s._v("：仅当 "),a("code",[s._v("seq")]),s._v(" 中所有对象都为布尔真时返回 "),a("code",[s._v("True")]),s._v("，否则返回 "),a("code",[s._v("False")])]),s._v(" "),a("li",[a("code",[s._v("any(seq)")]),s._v("：只要 "),a("code",[s._v("seq")]),s._v(" 中任何一个对象为布尔真就返回 "),a("code",[s._v("True")]),s._v("，否则返回 "),a("code",[s._v("False")])])]),s._v(" "),a("p",[s._v("假如我们有下面这段代码：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("all_numbers_gt_10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""仅当序列中所有数字大于 10 时，返回 True\n    """')]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("如果使用 "),a("code",[s._v("all()")]),s._v(" 内建函数，再配合一个简单的生成器表达式，上面的代码可以写成这样：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("all_numbers_gt_10_2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("简单、高效，同时也没有损失可用性。")]),s._v(" "),a("h3",{attrs:{id:"_4-使用-try-while-for-中-else-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用-try-while-for-中-else-分支"}},[s._v("#")]),s._v(" 4. 使用 try/while/for 中 else 分支")]),s._v(" "),a("p",[s._v("让我们看看这个函数：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("do_stuff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    first_thing_successed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        do_the_first_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        first_thing_successed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error while calling do_some_thing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅当 first_thing 成功完成时，做第二件事")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" first_thing_successed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" do_the_second_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("在函数 "),a("code",[s._v("do_stuff")]),s._v(" 中，我们希望只有当 "),a("code",[s._v("do_the_first_thing()")]),s._v(" 成功调用后*（也就是不抛出任何异常）*，才继续做第二个函数调用。为了做到这一点，我们需要定义一个额外的变量 "),a("code",[s._v("first_thing_successed")]),s._v(" 来作为标记。")]),s._v(" "),a("p",[s._v("其实，我们可以用更简单的方法达到同样的效果：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("do_stuff")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        do_the_first_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" Exception "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Error while calling do_some_thing"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" do_the_second_thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("在 "),a("code",[s._v("try")]),s._v(" 语句块最后追加上 "),a("code",[s._v("else")]),s._v(" 分支后，分支下的"),a("code",[s._v("do_the_second_thing()")]),s._v(" 便只会在 "),a("strong",[s._v("try 下面的所有语句正常执行（也就是没有异常，没有 return、break 等）完成后执行")]),s._v("。")]),s._v(" "),a("p",[s._v("类似的，Python 里的 "),a("code",[s._v("for/while")]),s._v(" 循环也支持添加 "),a("code",[s._v("else")]),s._v(" 分支，它们表示：当循环使用的迭代对象被正常耗尽、或 while 循环使用的条件变量变为 False 后才执行 else 分支下的代码。")]),s._v(" "),a("h2",{attrs:{id:"常见陷阱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见陷阱"}},[s._v("#")]),s._v(" 常见陷阱")]),s._v(" "),a("h3",{attrs:{id:"_1-与-none-值的比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-与-none-值的比较"}},[s._v("#")]),s._v(" 1. 与 None 值的比较")]),s._v(" "),a("p",[s._v("在 Python 中，有两种比较变量的方法："),a("code",[s._v("==")]),s._v(" 和 "),a("code",[s._v("is")]),s._v("，二者在含义上有着根本的区别：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("==")]),s._v("：表示二者所指向的的"),a("strong",[s._v("值")]),s._v("是否一致")]),s._v(" "),a("li",[a("code",[s._v("is")]),s._v("：表示二者是否指向内存中的同一份内容，也就是 "),a("code",[s._v("id(x)")]),s._v(" 是否等于 "),a("code",[s._v("id(y)")])])]),s._v(" "),a("p",[a("code",[s._v("None")]),s._v(" 在 Python 语言中是一个单例对象，如果你要判断某个变量是否为 None 时，记得使用 "),a("code",[s._v("is")]),s._v(" 而不是 "),a("code",[s._v("==")]),s._v("，因为只有 "),a("code",[s._v("is")]),s._v(" 才能在严格意义上表示某个变量是否是 None。")]),s._v(" "),a("p",[s._v("否则，可能出现下面这样的情况：")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("__eq__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" foo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在上面代码中，Foo 这个类通过自定义 "),a("code",[s._v("__eq__")]),s._v(" 魔法方法的方式，很容易就满足了 "),a("code",[s._v("== None")]),s._v(" 这个条件。")]),s._v(" "),a("p",[a("strong",[s._v("所以，当你要判断某个变量是否为 None 时，请使用 "),a("code",[s._v("is")]),s._v(" 而不是 "),a("code",[s._v("==")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"_2-留意-and-和-or-的运算优先级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-留意-and-和-or-的运算优先级"}},[s._v("#")]),s._v(" 2. 留意 and 和 or 的运算优先级")]),s._v(" "),a("p",[s._v("看看下面这两个表达式，猜猜它们的值一样吗？")]),s._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("答案是：不一样，它们的值分别是 "),a("code",[s._v("False")]),s._v(" 和 "),a("code",[s._v("True")]),s._v("，你猜对了吗？")]),s._v(" "),a("p",[s._v("问题的关键在于："),a("strong",[a("code",[s._v("and")]),s._v(" 运算符的优先级大于 "),a("code",[s._v("or")])]),s._v("。因此上面的第二个表达式在 Python 看来实际上是 "),a("code",[s._v("True or (False and False)")]),s._v("。所以结果是 "),a("code",[s._v("True")]),s._v(" 而不是 "),a("code",[s._v("False")]),s._v("。")]),s._v(" "),a("p",[s._v("在编写包含多个 "),a("code",[s._v("and")]),s._v(" 和 "),a("code",[s._v("or")]),s._v(" 的表达式时，请额外注意 "),a("code",[s._v("and")]),s._v(" 和 "),a("code",[s._v("or")]),s._v(" 的运算优先级。即使执行优先级正好是你需要的那样，你也可以加上额外的括号来让代码更清晰。")]),s._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[s._v("#")]),s._v(" 结语")]),s._v(" "),a("p",[s._v("以上就是『Python 工匠』系列文章的第二篇。不知道文章的内容是否对你的胃口。")]),s._v(" "),a("p",[s._v("代码内的分支语句不可避免，我们在编写代码时，需要尤其注意它的可读性，避免对其他看到代码的人造成困扰。")]),s._v(" "),a("p",[s._v("看完文章的你，有没有什么想吐槽的？请留言告诉我吧。")]),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/docs/python-craftsman/3-tips-on-numbers-and-strings.html"}},[s._v(">>>下一篇【3.使用数字与字符串的技巧】")])],1),s._v(" "),a("p",[a("RouterLink",{attrs:{to:"/docs/python-craftsman/1-using-variables-well.html"}},[s._v("<<<上一篇【1.善用变量来改善代码质量】")])],1),s._v(" "),a("h2",{attrs:{id:"注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[s._v("#")]),s._v(" 注解")]),s._v(" "),a("ol",[a("li",[a("a",{attrs:{id:"annot1"}}),s._v("事实上 "),a("code",[s._v("x and a or b")]),s._v(" 不是总能给你正确的结果，只有当 a 与 b 的布尔值为真时，这个表达式才能正常工作，这是由逻辑运算的短路特性决定的。你可以在命令行中运行 "),a("code",[s._v("True and None or 0")]),s._v(" 试试看，结果是 0 而非 None。")])]),s._v(" "),a("blockquote",[a("p",[s._v("文章更新记录：")]),s._v(" "),a("ul",[a("li",[s._v("2018.04.08：在与 @geishu 的讨论后，调整了“运算优先符”使用的代码样例")]),s._v(" "),a("li",[s._v('2018.04.10：根据 @dongweiming 的建议，添加注解说明 "x and y or c" 表达式的陷阱')])])])])}),[],!1,null,null,null);t.default=e.exports}}]);